### Target server configuration setup
ctk.tgt.urlRoot=http://192.168.2.214:8000/v0.5.1

### CTK control of what tests get executed
# name of java package to scan for classes matching the patterns
ctk.testpackage=org.ga4gh.cts

# pattern matching on test (or testsuite) names
# patterns are comma-sep set ofAnt-style path-centric simple matches
ctk.pattern.testclass=**/*IT.class,**/IT*.class
ctk.pattern.testsuite=**/*TestSuite.class

#comma-sep list of patterns, if you want to do something custom
# defaut is to just run all tests
ctk.matchstr=${ctk.pattern.testclass}

# turn ConsoleLogger OFF or ON, this is in addition to the log4 logger
# ON makes more output, but it's tolerable and reassuring
ctk.antlog.consolelogger=OFF

# test counts, fail, etc are accumumulated during each test run, reported at end;
# should we clear between runs?
ctk.antlog.clearstats=ON

# the ant "build file" we use to run junit, junit reporter or whatever
# when run from command line (doesn't currently affect output when running maven)
# very unlikely you want to change this!
ctk.antfile=lib/antRunTests.xml

#identify file holding domain data tyes generated from domain IDL (currently Avro)
# This file is generated during build by the ctk-domain module, but you can
# edit it or here point to a different file to restrict/expand the data types
# which the DomainInformationService considers. These types don't affect what is
# on the classpath, only what is reported to tests as being "in the domain"
ctk.domaintypesfile=../ctk-domain/src/main/resources/avro-types.json

# the testjar property identifies the primary test jar file to be executed.
# The contents of the jar are copied into the 'packedup-tests.jar' file and
# put into the 'lib' directory of the test run.
ctk.testjar=../cts-java/target/cts-java-0.5.1-SNAPSHOT-tests.jar

# directories (or individual .class files) in this comma/space-seperated
# list are added to the "packedup-up-tests.jar" *before* the existing test jar;
# this lets you point this at your dev environment output directories to add new
# tests or override existing tests. The default here is (as an example)
# to add the test-classes of the main cts-java module, even though this
# duplicates the effect of the ctk.testjar default above.
ctk.testclassroots=../cts-java/target/test-classes

# identify properties file with target server endpoints
ctk.defaulttransportfile=../ctk-transport/src/main/resources/defaulttransport.properties

# this title (with ctk.tgt.urlRoot appended) goes on top of each HTML results page
# when run from command line (doesn't currently affect output when running maven)
ctk.reporttitle=CTK Test Results of

# temporarily not used
#ctk.logging.systest=SYSTEST
#ctk.logging.systest.traffic=SYSTEST.TRAFFIC

### Spring/framework control
#
# turn off the Spring cmd-line banner
spring.main.show-banner=false
# configure PropertiesLauncher to look in a 'lib' dir under the launch dir for test jars
# so if you launch using java -jar ... then the <CWD>/lib dir will be added to the classpath
loader.path=lib,tests
# configure the logging framework to load a control file from the lib dir, if present
# (else will load from the resources path in the jar package)
logging.config=lib/log4j2.xml

