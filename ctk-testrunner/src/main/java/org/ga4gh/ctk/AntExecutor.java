package org.ga4gh.ctk;

/**
 * <p>Executes ant to run junit tests from command line.</p>
 * <p>Created by Wayne Stidolph on 6/27/2015.</p>
 */

import org.apache.tools.ant.*;
import org.ga4gh.ctk.config.*;
import org.ga4gh.ctk.transport.*;
import org.slf4j.*;
import org.springframework.beans.factory.annotation.*;
import org.springframework.context.annotation.*;
import org.springframework.stereotype.*;

import java.io.*;
import java.util.*;

import static org.slf4j.LoggerFactory.*;

/**
 * <p>This class executes ant (ver 1.9.5 in the initial CTK) to do
 * junit testing controlled by an <a href="http://ant.apache.org/">Apache Ant</a> file.</p>
 * <p>This class is affected bt these properties (details below)</p>
 * <ul>
 *     <li>ctk.antfile</li>
 *     <li>ctk.testjar</li>
 *     <li>ctk.matchstr</li>
 *     <li>ctk.reporttitle</li>
 *     <li>ctk.antlog.clearstats</li>
 *     <li>ctk.antlog.consolelogger</li>
 * </ul>
 * <p>The ant file is set by the "ctk.antfile" property - normally it is the "lib/antRunTests.xml" file</p>
 * <p>The antfile is expected to do two main tasks:</p>
 * <ul>
 *     <li>&lt;junit> runs junit to execute tests (methods annotated with @Test) from test classes
 *     (classes selected a name regex-match from a test-classes jar; this junit task creates
 *     .xml and .txt. output files in the "target/" directory</li>
 *     <li>&lt;junitreport> evaluates the <junit> *.xml results and creates an HTML
 *     version in "target/report/html" tree</li>
 * </ul>
 * <p>This class sets properties to pass into the ant execution:
 * <ul>
 *     <li>"ctk.testjar" sets what jar to look inside for classes as candidate tests</li>
 *     <li>"ctk.matchstr" sets the pattern(s) to use to select tests by name, from the candidates</li>
 *     <li>"ctk.reporttitle" sets a header title prefix on the ant HTML reports</li>
 * </ul>
 * <p>The class starts
 * from the "ctk.matchstr" property, splits it on commas, and loops over the split-out
 * values passing each into the ant task as a separate ant run. (So, multiple comma-
 * separated values in ctk.matchstr cause multiple ant executions and independent reports)</p>
 * <p>As ant runs, it emits "build event" notices - that the run has started, or finished, etc. This
 * class attaches an {@link AntExecListener} to map those events into the application logs</p>
 * <p>The antfile's junit task also creates and attaches a {@link TestExecListener} to catch
 * the messages generated by the junit ant task (test starting, finishing, count of tests, time, etc)
 * and to put them each into the logging system; the TestExecListener also accumulates the totals. Then,
 * at the end of the run, this class reads out the totals and logs the "Overall" report.</p>
 * <p>This class can optionally clear the statistics accumulated by that TestExecListener. Whether
 * or not to clear between runs is controlled by the "ctk.antlog.clearstats" property ("ON" means
 * clear teh stats, anything else means don't clear the stats).</p>
 * <p>As ant runs, any task in the antfile might emit message to the ant notification system; those
 * are caught and routed into the logging system as described earlier, but this class also enables
 * attaching the a ConsoleLogger to catch these non-test messages, and simply routes them
 * to stdout and stderr for you to see or re-route. Whether to attach or not attache the
 * ConsoleLogger is controlled by the "ctk.antlog.consolelogger" property ("ON" means attach,
 * anything else means to not attach.)</p>
 * @author srccodes.com
 * @version 1.0
 */
@Component
@Scope("prototype")
public class AntExecutor {

    private static Logger log = getLogger(AntExecutor.class);
    private static Logger testlog = LoggerFactory.getLogger(CtkLogs.SYSTEST);

    @Value("${ctk.antfile}")
    private File antFile; // use direct injection; let Spring convert the String to a File
    public void setAntfile(File theFile){
        antFile = theFile;
    }

    @Autowired
    private Props props;
    public void setProps(Props props){
        this.props = props;
    }


    DefaultLogger consoleLogger;
    /**
     * To execute the default target specified in the Ant antRunTests.xml file
     *
     */
    public boolean executeAntTask() {
        return
                executeAntTask( // use the properties and defaults
                        props.ctk_testjar,
                        props.ctk_matchstr,
                        URLMAPPING.getInstance(),
                        "testresults/target/",
                        -1, // default runkey
                        null
                    );
    }

    /**
     * Execute the tasks in ant build script (runAntTests.xml)
     *
     * @param testjar tests jar to unpack/run in Ant
     */
    public boolean executeAntTask(String testjar,
                                  String matchstr,
                                  URLMAPPING urls,
                                  String toDir,
                                  long runkey,
                                  BuildListener theBoss) {

        log.trace("passed-in urls has " + urls.getEndpoints());
        log.info("passed-in urls.getUrlRoot " + urls.getUrlRoot());

        String expandedReportTitle = props.ctk_report_title + " " + urls.getUrlRoot() + " runkey: " + runkey ;

        boolean success = false;
        AntExecListener antExecListener = new AntExecListener();
        // Prepare Ant project
        Project project = new Project();
        try {
            File buildFile = antFile;
            // pass properties to Ant not only for ant file, but also to
            // be avail for CTK tests which ant runs, possibly in a different JVM
            // or classloader
            project.setUserProperty("basedir",System.getProperty("user.dir"));
            project.setUserProperty("ant.file", buildFile.getName());
            project.setUserProperty("ctk.testjar", testjar);
            project.setUserProperty("ctk.testclassroots", props.ctk_testclassroots);
            project.setUserProperty("ctk.matchstr", matchstr);
            project.setUserProperty("ctk.reporttitle", expandedReportTitle);
            project.setUserProperty("ctk.todir", toDir);
            project.setUserProperty("ctk.runkey", ""+runkey);
            project.setUserProperty("ctk.domaintypesfile", props.ctk_domaintypesfile);
            project.setUserProperty("ctk.defaulttransportfile",props.ctk_defaulttransportfile);
            project.addBuildListener(antExecListener);
            // if there's an interested listener, hook them up
            if(theBoss != null)
                project.addBuildListener(theBoss);

            project.fireBuildStarted();
            project.init();
            ProjectHelper projectHelper = ProjectHelper.getProjectHelper();
            project.addReference("ant.projectHelper", projectHelper);
            projectHelper.parse(project, buildFile);
        } catch (Exception e) {
            log.warn("Exception setting up ant project based on " + antFile, e.getCause());
            e.printStackTrace();
        }

        log.debug("ctk.antlog.consolelogger is " + props.ctk_antlog_consolelogger);
        if("ON".equals(props.ctk_antlog_consolelogger)) {
            consoleLogger = getConsoleLogger();
            log.debug("enabling ConsoleLogger");
            project.addBuildListener(consoleLogger);
        }
        String targetToExecute = "";

        // Capture event for Ant script build start / stop / failure
        try {
            // If no target specified then default target will be executed.
            targetToExecute = project.getDefaultTarget();

            // capture system properties so we can edit them to get props into ant build being launched
            Properties copySysProp = new Properties(System.getProperties()); // this is the replacement

            // we add the URLs to the system props, so when the tests use
            // URLMAPPING.doInit() they pick these up as highest-priority
            // and thereby use the passed-in values.
            Properties sysprops = new Properties(System.getProperties()); // this one we'll alter
            sysprops.putAll(urls.getEndpoints());
            System.setProperties(sysprops);

            log.debug("About to run ant, sysprop ctk.tgt.urlRoot " + System.getProperty("ctk.tgt.urlRoot"));
            project.executeTarget(targetToExecute);
            success = true;// well, we got a good launch at least!

            System.setProperties(copySysProp); // restore the system
            log.debug("Done with ant, restored system props, ctk.tgt.urlRoot "
                    + System.getProperty("ctk.tgt.urlRoot"));

            project.fireBuildFinished(null);
            testlog.info("Overall: " + TestExecListener.getTestReport());
        } catch (BuildException buildException) {
            // NOTE just because we get a BuildException doesn't mean the
            // build (the test run) halted, since we have haltonerror=false
            // in theantTestRun.xml file for the junit task
            project.fireBuildFinished(buildException);
            success = false;
            log.warn("Got BuildException " + buildException.toString());
            buildException.printStackTrace();
        }
        if ("ON".equals(props.ctk_antlog_clearstats))
            TestExecListener.resetStats(); // these are static fields which accumulate results

        return success;
    }

    /**
     * Logger to log output generated while executing ant script in console
     *
     * @return
     */
    private DefaultLogger getConsoleLogger() {

        DefaultLogger consoleLogger = new DefaultLogger();
        consoleLogger.setErrorPrintStream(System.err);
        consoleLogger.setOutputPrintStream(System.out);
        consoleLogger.setMessageOutputLevel(Project.MSG_INFO); // TODO pick up a property for this level-set

        return consoleLogger;
    }
}
