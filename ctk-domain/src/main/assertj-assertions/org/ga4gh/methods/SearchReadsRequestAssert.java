package org.ga4gh.methods;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link SearchReadsRequest} specific assertions - Generated by CustomAssertionGenerator.
 */
public class SearchReadsRequestAssert extends AbstractAssert<SearchReadsRequestAssert, SearchReadsRequest> {

  /**
   * Creates a new <code>{@link SearchReadsRequestAssert}</code> to make assertions on actual SearchReadsRequest.
   * @param actual the SearchReadsRequest we want to make assertions on.
   */
  public SearchReadsRequestAssert(SearchReadsRequest actual) {
    super(actual, SearchReadsRequestAssert.class);
  }

  /**
   * An entry point for SearchReadsRequestAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(mySearchReadsRequest)</code> and get specific assertion with code completion.
   * @param actual the SearchReadsRequest we want to make assertions on.
   * @return a new <code>{@link SearchReadsRequestAssert}</code>
   */
  public static SearchReadsRequestAssert assertThat(SearchReadsRequest actual) {
    return new SearchReadsRequestAssert(actual);
  }

  /**
   * Verifies that the actual SearchReadsRequest's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual SearchReadsRequest's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual SearchReadsRequest's classSchema is not equal to the given one.
   */
  public SearchReadsRequestAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual SearchReadsRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual SearchReadsRequest's end is equal to the given one.
   * @param end the given end to compare the actual SearchReadsRequest's end to.
   * @return this assertion object.
   * @throws AssertionError - if the actual SearchReadsRequest's end is not equal to the given one.
   */
  public SearchReadsRequestAssert hasEnd(Long end) {
    // check that actual SearchReadsRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting end of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualEnd = actual.getEnd();
    if (!Objects.areEqual(actualEnd, end)) {
      failWithMessage(assertjErrorMessage, actual, end, actualEnd);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual SearchReadsRequest's pageSize is equal to the given one.
   * @param pageSize the given pageSize to compare the actual SearchReadsRequest's pageSize to.
   * @return this assertion object.
   * @throws AssertionError - if the actual SearchReadsRequest's pageSize is not equal to the given one.
   */
  public SearchReadsRequestAssert hasPageSize(Integer pageSize) {
    // check that actual SearchReadsRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting pageSize of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualPageSize = actual.getPageSize();
    if (!Objects.areEqual(actualPageSize, pageSize)) {
      failWithMessage(assertjErrorMessage, actual, pageSize, actualPageSize);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual SearchReadsRequest's pageToken is equal to the given one.
   * @param pageToken the given pageToken to compare the actual SearchReadsRequest's pageToken to.
   * @return this assertion object.
   * @throws AssertionError - if the actual SearchReadsRequest's pageToken is not equal to the given one.
   */
  public SearchReadsRequestAssert hasPageToken(String pageToken) {
    // check that actual SearchReadsRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting pageToken of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPageToken = actual.getPageToken();
    if (!Objects.areEqual(actualPageToken, pageToken)) {
      failWithMessage(assertjErrorMessage, actual, pageToken, actualPageToken);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual SearchReadsRequest's readGroupIds contains the given String elements.
   * @param readGroupIds the given elements that should be contained in actual SearchReadsRequest's readGroupIds.
   * @return this assertion object.
   * @throws AssertionError if the actual SearchReadsRequest's readGroupIds does not contain all given String elements.
   */
  public SearchReadsRequestAssert hasReadGroupIds(String... readGroupIds) {
    // check that actual SearchReadsRequest we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (readGroupIds == null) failWithMessage("Expecting readGroupIds parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getReadGroupIds(), readGroupIds);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual SearchReadsRequest's readGroupIds contains <b>only<b> the given String elements and nothing else in whatever order.
   * @param readGroupIds the given elements that should be contained in actual SearchReadsRequest's readGroupIds.
   * @return this assertion object.
   * @throws AssertionError if the actual SearchReadsRequest's readGroupIds does not contain all given String elements.
   */
  public SearchReadsRequestAssert hasOnlyReadGroupIds(String... readGroupIds) {
    // check that actual SearchReadsRequest we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (readGroupIds == null) failWithMessage("Expecting readGroupIds parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getReadGroupIds(), readGroupIds);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual SearchReadsRequest's readGroupIds does not contain the given String elements.
   *
   * @param readGroupIds the given elements that should not be in actual SearchReadsRequest's readGroupIds.
   * @return this assertion object.
   * @throws AssertionError if the actual SearchReadsRequest's readGroupIds contains any given String elements.
   */
  public SearchReadsRequestAssert doesNotHaveReadGroupIds(String... readGroupIds) {
    // check that actual SearchReadsRequest we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (readGroupIds == null) failWithMessage("Expecting readGroupIds parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getReadGroupIds(), readGroupIds);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual SearchReadsRequest has no readGroupIds.
   * @return this assertion object.
   * @throws AssertionError if the actual SearchReadsRequest's readGroupIds is not empty.
   */
  public SearchReadsRequestAssert hasNoReadGroupIds() {
    // check that actual SearchReadsRequest we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have readGroupIds but had :\n  <%s>";
    
    // check
    if (actual.getReadGroupIds().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getReadGroupIds());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual SearchReadsRequest's referenceId is equal to the given one.
   * @param referenceId the given referenceId to compare the actual SearchReadsRequest's referenceId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual SearchReadsRequest's referenceId is not equal to the given one.
   */
  public SearchReadsRequestAssert hasReferenceId(String referenceId) {
    // check that actual SearchReadsRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting referenceId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualReferenceId = actual.getReferenceId();
    if (!Objects.areEqual(actualReferenceId, referenceId)) {
      failWithMessage(assertjErrorMessage, actual, referenceId, actualReferenceId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual SearchReadsRequest's schema is equal to the given one.
   * @param schema the given schema to compare the actual SearchReadsRequest's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual SearchReadsRequest's schema is not equal to the given one.
   */
  public SearchReadsRequestAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual SearchReadsRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual SearchReadsRequest's start is equal to the given one.
   * @param start the given start to compare the actual SearchReadsRequest's start to.
   * @return this assertion object.
   * @throws AssertionError - if the actual SearchReadsRequest's start is not equal to the given one.
   */
  public SearchReadsRequestAssert hasStart(Long start) {
    // check that actual SearchReadsRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting start of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualStart = actual.getStart();
    if (!Objects.areEqual(actualStart, start)) {
      failWithMessage(assertjErrorMessage, actual, start, actualStart);
    }

    // return the current assertion for method chaining
    return this;
  }







}
