package org.ga4gh.methods;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link SearchDatasetsResponse} specific assertions - Generated by CustomAssertionGenerator.
 */
public class SearchDatasetsResponseAssert extends AbstractAssert<SearchDatasetsResponseAssert, SearchDatasetsResponse> {

  /**
   * Creates a new <code>{@link SearchDatasetsResponseAssert}</code> to make assertions on actual SearchDatasetsResponse.
   * @param actual the SearchDatasetsResponse we want to make assertions on.
   */
  public SearchDatasetsResponseAssert(SearchDatasetsResponse actual) {
    super(actual, SearchDatasetsResponseAssert.class);
  }

  /**
   * An entry point for SearchDatasetsResponseAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(mySearchDatasetsResponse)</code> and get specific assertion with code completion.
   * @param actual the SearchDatasetsResponse we want to make assertions on.
   * @return a new <code>{@link SearchDatasetsResponseAssert}</code>
   */
  public static SearchDatasetsResponseAssert assertThat(SearchDatasetsResponse actual) {
    return new SearchDatasetsResponseAssert(actual);
  }

  /**
   * Verifies that the actual SearchDatasetsResponse's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual SearchDatasetsResponse's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual SearchDatasetsResponse's classSchema is not equal to the given one.
   */
  public SearchDatasetsResponseAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual SearchDatasetsResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual SearchDatasetsResponse's datasets contains the given org.ga4gh.models.Dataset elements.
   * @param datasets the given elements that should be contained in actual SearchDatasetsResponse's datasets.
   * @return this assertion object.
   * @throws AssertionError if the actual SearchDatasetsResponse's datasets does not contain all given org.ga4gh.models.Dataset elements.
   */
  public SearchDatasetsResponseAssert hasDatasets(org.ga4gh.models.Dataset... datasets) {
    // check that actual SearchDatasetsResponse we want to make assertions on is not null.
    isNotNull();

    // check that given org.ga4gh.models.Dataset varargs is not null.
    if (datasets == null) failWithMessage("Expecting datasets parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getDatasets(), datasets);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual SearchDatasetsResponse's datasets contains <b>only<b> the given org.ga4gh.models.Dataset elements and nothing else in whatever order.
   * @param datasets the given elements that should be contained in actual SearchDatasetsResponse's datasets.
   * @return this assertion object.
   * @throws AssertionError if the actual SearchDatasetsResponse's datasets does not contain all given org.ga4gh.models.Dataset elements.
   */
  public SearchDatasetsResponseAssert hasOnlyDatasets(org.ga4gh.models.Dataset... datasets) {
    // check that actual SearchDatasetsResponse we want to make assertions on is not null.
    isNotNull();

    // check that given org.ga4gh.models.Dataset varargs is not null.
    if (datasets == null) failWithMessage("Expecting datasets parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getDatasets(), datasets);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual SearchDatasetsResponse's datasets does not contain the given org.ga4gh.models.Dataset elements.
   *
   * @param datasets the given elements that should not be in actual SearchDatasetsResponse's datasets.
   * @return this assertion object.
   * @throws AssertionError if the actual SearchDatasetsResponse's datasets contains any given org.ga4gh.models.Dataset elements.
   */
  public SearchDatasetsResponseAssert doesNotHaveDatasets(org.ga4gh.models.Dataset... datasets) {
    // check that actual SearchDatasetsResponse we want to make assertions on is not null.
    isNotNull();

    // check that given org.ga4gh.models.Dataset varargs is not null.
    if (datasets == null) failWithMessage("Expecting datasets parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getDatasets(), datasets);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual SearchDatasetsResponse has no datasets.
   * @return this assertion object.
   * @throws AssertionError if the actual SearchDatasetsResponse's datasets is not empty.
   */
  public SearchDatasetsResponseAssert hasNoDatasets() {
    // check that actual SearchDatasetsResponse we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have datasets but had :\n  <%s>";
    
    // check
    if (actual.getDatasets().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getDatasets());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual SearchDatasetsResponse's nextPageToken is equal to the given one.
   * @param nextPageToken the given nextPageToken to compare the actual SearchDatasetsResponse's nextPageToken to.
   * @return this assertion object.
   * @throws AssertionError - if the actual SearchDatasetsResponse's nextPageToken is not equal to the given one.
   */
  public SearchDatasetsResponseAssert hasNextPageToken(String nextPageToken) {
    // check that actual SearchDatasetsResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting nextPageToken of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualNextPageToken = actual.getNextPageToken();
    if (!Objects.areEqual(actualNextPageToken, nextPageToken)) {
      failWithMessage(assertjErrorMessage, actual, nextPageToken, actualNextPageToken);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual SearchDatasetsResponse's schema is equal to the given one.
   * @param schema the given schema to compare the actual SearchDatasetsResponse's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual SearchDatasetsResponse's schema is not equal to the given one.
   */
  public SearchDatasetsResponseAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual SearchDatasetsResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }



}
