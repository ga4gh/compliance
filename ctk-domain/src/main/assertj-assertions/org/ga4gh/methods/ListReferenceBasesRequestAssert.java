package org.ga4gh.methods;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link ListReferenceBasesRequest} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ListReferenceBasesRequestAssert extends AbstractAssert<ListReferenceBasesRequestAssert, ListReferenceBasesRequest> {

  /**
   * Creates a new <code>{@link ListReferenceBasesRequestAssert}</code> to make assertions on actual ListReferenceBasesRequest.
   * @param actual the ListReferenceBasesRequest we want to make assertions on.
   */
  public ListReferenceBasesRequestAssert(ListReferenceBasesRequest actual) {
    super(actual, ListReferenceBasesRequestAssert.class);
  }

  /**
   * An entry point for ListReferenceBasesRequestAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myListReferenceBasesRequest)</code> and get specific assertion with code completion.
   * @param actual the ListReferenceBasesRequest we want to make assertions on.
   * @return a new <code>{@link ListReferenceBasesRequestAssert}</code>
   */
  public static ListReferenceBasesRequestAssert assertThat(ListReferenceBasesRequest actual) {
    return new ListReferenceBasesRequestAssert(actual);
  }

  /**
   * Verifies that the actual ListReferenceBasesRequest's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual ListReferenceBasesRequest's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ListReferenceBasesRequest's classSchema is not equal to the given one.
   */
  public ListReferenceBasesRequestAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual ListReferenceBasesRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ListReferenceBasesRequest's end is equal to the given one.
   * @param end the given end to compare the actual ListReferenceBasesRequest's end to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ListReferenceBasesRequest's end is not equal to the given one.
   */
  public ListReferenceBasesRequestAssert hasEnd(Long end) {
    // check that actual ListReferenceBasesRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting end of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualEnd = actual.getEnd();
    if (!Objects.areEqual(actualEnd, end)) {
      failWithMessage(assertjErrorMessage, actual, end, actualEnd);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ListReferenceBasesRequest's pageToken is equal to the given one.
   * @param pageToken the given pageToken to compare the actual ListReferenceBasesRequest's pageToken to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ListReferenceBasesRequest's pageToken is not equal to the given one.
   */
  public ListReferenceBasesRequestAssert hasPageToken(String pageToken) {
    // check that actual ListReferenceBasesRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting pageToken of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPageToken = actual.getPageToken();
    if (!Objects.areEqual(actualPageToken, pageToken)) {
      failWithMessage(assertjErrorMessage, actual, pageToken, actualPageToken);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ListReferenceBasesRequest's schema is equal to the given one.
   * @param schema the given schema to compare the actual ListReferenceBasesRequest's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ListReferenceBasesRequest's schema is not equal to the given one.
   */
  public ListReferenceBasesRequestAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual ListReferenceBasesRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ListReferenceBasesRequest's start is equal to the given one.
   * @param start the given start to compare the actual ListReferenceBasesRequest's start to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ListReferenceBasesRequest's start is not equal to the given one.
   */
  public ListReferenceBasesRequestAssert hasStart(Long start) {
    // check that actual ListReferenceBasesRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting start of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualStart = actual.getStart();
    if (!Objects.areEqual(actualStart, start)) {
      failWithMessage(assertjErrorMessage, actual, start, actualStart);
    }

    // return the current assertion for method chaining
    return this;
  }




}
