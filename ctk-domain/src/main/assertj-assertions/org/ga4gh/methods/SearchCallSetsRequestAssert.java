package org.ga4gh.methods;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link SearchCallSetsRequest} specific assertions - Generated by CustomAssertionGenerator.
 */
public class SearchCallSetsRequestAssert extends AbstractAssert<SearchCallSetsRequestAssert, SearchCallSetsRequest> {

  /**
   * Creates a new <code>{@link SearchCallSetsRequestAssert}</code> to make assertions on actual SearchCallSetsRequest.
   * @param actual the SearchCallSetsRequest we want to make assertions on.
   */
  public SearchCallSetsRequestAssert(SearchCallSetsRequest actual) {
    super(actual, SearchCallSetsRequestAssert.class);
  }

  /**
   * An entry point for SearchCallSetsRequestAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(mySearchCallSetsRequest)</code> and get specific assertion with code completion.
   * @param actual the SearchCallSetsRequest we want to make assertions on.
   * @return a new <code>{@link SearchCallSetsRequestAssert}</code>
   */
  public static SearchCallSetsRequestAssert assertThat(SearchCallSetsRequest actual) {
    return new SearchCallSetsRequestAssert(actual);
  }

  /**
   * Verifies that the actual SearchCallSetsRequest's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual SearchCallSetsRequest's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual SearchCallSetsRequest's classSchema is not equal to the given one.
   */
  public SearchCallSetsRequestAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual SearchCallSetsRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual SearchCallSetsRequest's name is equal to the given one.
   * @param name the given name to compare the actual SearchCallSetsRequest's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual SearchCallSetsRequest's name is not equal to the given one.
   */
  public SearchCallSetsRequestAssert hasName(String name) {
    // check that actual SearchCallSetsRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual SearchCallSetsRequest's pageSize is equal to the given one.
   * @param pageSize the given pageSize to compare the actual SearchCallSetsRequest's pageSize to.
   * @return this assertion object.
   * @throws AssertionError - if the actual SearchCallSetsRequest's pageSize is not equal to the given one.
   */
  public SearchCallSetsRequestAssert hasPageSize(Integer pageSize) {
    // check that actual SearchCallSetsRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting pageSize of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualPageSize = actual.getPageSize();
    if (!Objects.areEqual(actualPageSize, pageSize)) {
      failWithMessage(assertjErrorMessage, actual, pageSize, actualPageSize);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual SearchCallSetsRequest's pageToken is equal to the given one.
   * @param pageToken the given pageToken to compare the actual SearchCallSetsRequest's pageToken to.
   * @return this assertion object.
   * @throws AssertionError - if the actual SearchCallSetsRequest's pageToken is not equal to the given one.
   */
  public SearchCallSetsRequestAssert hasPageToken(String pageToken) {
    // check that actual SearchCallSetsRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting pageToken of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPageToken = actual.getPageToken();
    if (!Objects.areEqual(actualPageToken, pageToken)) {
      failWithMessage(assertjErrorMessage, actual, pageToken, actualPageToken);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual SearchCallSetsRequest's schema is equal to the given one.
   * @param schema the given schema to compare the actual SearchCallSetsRequest's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual SearchCallSetsRequest's schema is not equal to the given one.
   */
  public SearchCallSetsRequestAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual SearchCallSetsRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual SearchCallSetsRequest's variantSetId is equal to the given one.
   * @param variantSetId the given variantSetId to compare the actual SearchCallSetsRequest's variantSetId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual SearchCallSetsRequest's variantSetId is not equal to the given one.
   */
  public SearchCallSetsRequestAssert hasVariantSetId(String variantSetId) {
    // check that actual SearchCallSetsRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting variantSetId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualVariantSetId = actual.getVariantSetId();
    if (!Objects.areEqual(actualVariantSetId, variantSetId)) {
      failWithMessage(assertjErrorMessage, actual, variantSetId, actualVariantSetId);
    }

    // return the current assertion for method chaining
    return this;
  }





}
