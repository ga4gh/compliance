package org.ga4gh.methods;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.util.Objects;

/**
 * {@link GAException} specific assertions - Generated by CustomAssertionGenerator.
 */
public class GAExceptionAssert extends AbstractAssert<GAExceptionAssert, GAException> {

  /**
   * Creates a new <code>{@link GAExceptionAssert}</code> to make assertions on actual GAException.
   * @param actual the GAException we want to make assertions on.
   */
  public GAExceptionAssert(GAException actual) {
    super(actual, GAExceptionAssert.class);
  }

  /**
   * An entry point for GAExceptionAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myGAException)</code> and get specific assertion with code completion.
   * @param actual the GAException we want to make assertions on.
   * @return a new <code>{@link GAExceptionAssert}</code>
   */
  public static GAExceptionAssert assertThat(GAException actual) {
    return new GAExceptionAssert(actual);
  }

  /**
   * Verifies that the actual GAException's cause is equal to the given one.
   * @param cause the given cause to compare the actual GAException's cause to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAException's cause is not equal to the given one.
   */
  public GAExceptionAssert hasCause(Throwable cause) {
    // check that actual GAException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting cause of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Throwable actualCause = actual.getCause();
    if (!Objects.areEqual(actualCause, cause)) {
      failWithMessage(assertjErrorMessage, actual, cause, actualCause);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAException's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual GAException's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAException's classSchema is not equal to the given one.
   */
  public GAExceptionAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual GAException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAException's errorCode is equal to the given one.
   * @param errorCode the given errorCode to compare the actual GAException's errorCode to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAException's errorCode is not equal to the given one.
   */
  public GAExceptionAssert hasErrorCode(Integer errorCode) {
    // check that actual GAException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting errorCode of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualErrorCode = actual.getErrorCode();
    if (!Objects.areEqual(actualErrorCode, errorCode)) {
      failWithMessage(assertjErrorMessage, actual, errorCode, actualErrorCode);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAException's localizedMessage is equal to the given one.
   * @param localizedMessage the given localizedMessage to compare the actual GAException's localizedMessage to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAException's localizedMessage is not equal to the given one.
   */
  public GAExceptionAssert hasLocalizedMessage(String localizedMessage) {
    // check that actual GAException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting localizedMessage of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualLocalizedMessage = actual.getLocalizedMessage();
    if (!Objects.areEqual(actualLocalizedMessage, localizedMessage)) {
      failWithMessage(assertjErrorMessage, actual, localizedMessage, actualLocalizedMessage);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAException's message is equal to the given one.
   * @param message the given message to compare the actual GAException's message to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAException's message is not equal to the given one.
   */
  public GAExceptionAssert hasMessage(String message) {
    // check that actual GAException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting message of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualMessage = actual.getMessage();
    if (!Objects.areEqual(actualMessage, message)) {
      failWithMessage(assertjErrorMessage, actual, message, actualMessage);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAException's message$ is equal to the given one.
   * @param message$ the given message$ to compare the actual GAException's message$ to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAException's message$ is not equal to the given one.
   */
  public GAExceptionAssert hasMessage$(String message$) {
    // check that actual GAException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting message$ of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualMessage$ = actual.getMessage$();
    if (!Objects.areEqual(actualMessage$, message$)) {
      failWithMessage(assertjErrorMessage, actual, message$, actualMessage$);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAException's schema is equal to the given one.
   * @param schema the given schema to compare the actual GAException's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAException's schema is not equal to the given one.
   */
  public GAExceptionAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual GAException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAException's stackTrace contains the given StackTraceElement elements.
   * @param stackTrace the given elements that should be contained in actual GAException's stackTrace.
   * @return this assertion object.
   * @throws AssertionError if the actual GAException's stackTrace does not contain all given StackTraceElement elements.
   */
  public GAExceptionAssert hasStackTrace(StackTraceElement... stackTrace) {
    // check that actual GAException we want to make assertions on is not null.
    isNotNull();

    // check that given StackTraceElement varargs is not null.
    if (stackTrace == null) failWithMessage("Expecting stackTrace parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getStackTrace()).contains(stackTrace);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAException's stackTrace contains <b>only<b> the given StackTraceElement elements and nothing else in whatever order.
   * 
   * @param stackTrace the given elements that should be contained in actual GAException's stackTrace.
   * @return this assertion object.
   * @throws AssertionError if the actual GAException's stackTrace does not contain all given StackTraceElement elements and nothing else.
   */
  public GAExceptionAssert hasOnlyStackTrace(StackTraceElement... stackTrace) {
    // check that actual GAException we want to make assertions on is not null.
    isNotNull();

    // check that given StackTraceElement varargs is not null.
    if (stackTrace == null) failWithMessage("Expecting stackTrace parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getStackTrace()).containsOnly(stackTrace);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAException's stackTrace does not contain the given StackTraceElement elements.
   *
   * @param stackTrace the given elements that should not be in actual GAException's stackTrace.
   * @return this assertion object.
   * @throws AssertionError if the actual GAException's stackTrace contains any given StackTraceElement elements.
   */
  public GAExceptionAssert doesNotHaveStackTrace(StackTraceElement... stackTrace) {
    // check that actual GAException we want to make assertions on is not null.
    isNotNull();

    // check that given StackTraceElement varargs is not null.
    if (stackTrace == null) failWithMessage("Expecting stackTrace parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getStackTrace()).doesNotContain(stackTrace);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAException has no stackTrace.
   * @return this assertion object.
   * @throws AssertionError if the actual GAException's stackTrace is not empty.
   */
  public GAExceptionAssert hasNoStackTrace() {
    // check that actual GAException we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have stackTrace but had :\n  <%s>";
    
    // check
    if (actual.getStackTrace().length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.getStackTrace()));
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GAException's suppressed contains the given Throwable elements.
   * @param suppressed the given elements that should be contained in actual GAException's suppressed.
   * @return this assertion object.
   * @throws AssertionError if the actual GAException's suppressed does not contain all given Throwable elements.
   */
  public GAExceptionAssert hasSuppressed(Throwable... suppressed) {
    // check that actual GAException we want to make assertions on is not null.
    isNotNull();

    // check that given Throwable varargs is not null.
    if (suppressed == null) failWithMessage("Expecting suppressed parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getSuppressed()).contains(suppressed);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAException's suppressed contains <b>only<b> the given Throwable elements and nothing else in whatever order.
   * 
   * @param suppressed the given elements that should be contained in actual GAException's suppressed.
   * @return this assertion object.
   * @throws AssertionError if the actual GAException's suppressed does not contain all given Throwable elements and nothing else.
   */
  public GAExceptionAssert hasOnlySuppressed(Throwable... suppressed) {
    // check that actual GAException we want to make assertions on is not null.
    isNotNull();

    // check that given Throwable varargs is not null.
    if (suppressed == null) failWithMessage("Expecting suppressed parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getSuppressed()).containsOnly(suppressed);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAException's suppressed does not contain the given Throwable elements.
   *
   * @param suppressed the given elements that should not be in actual GAException's suppressed.
   * @return this assertion object.
   * @throws AssertionError if the actual GAException's suppressed contains any given Throwable elements.
   */
  public GAExceptionAssert doesNotHaveSuppressed(Throwable... suppressed) {
    // check that actual GAException we want to make assertions on is not null.
    isNotNull();

    // check that given Throwable varargs is not null.
    if (suppressed == null) failWithMessage("Expecting suppressed parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getSuppressed()).doesNotContain(suppressed);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual GAException has no suppressed.
   * @return this assertion object.
   * @throws AssertionError if the actual GAException's suppressed is not empty.
   */
  public GAExceptionAssert hasNoSuppressed() {
    // check that actual GAException we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have suppressed but had :\n  <%s>";
    
    // check
    if (actual.getSuppressed().length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.getSuppressed()));
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual GAException's value is equal to the given one.
   * @param value the given value to compare the actual GAException's value to.
   * @return this assertion object.
   * @throws AssertionError - if the actual GAException's value is not equal to the given one.
   */
  public GAExceptionAssert hasValue(Object value) {
    // check that actual GAException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting value of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualValue = actual.getValue();
    if (!Objects.areEqual(actualValue, value)) {
      failWithMessage(assertjErrorMessage, actual, value, actualValue);
    }

    // return the current assertion for method chaining
    return this;
  }



}
