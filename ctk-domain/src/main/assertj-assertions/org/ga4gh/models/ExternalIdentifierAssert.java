package org.ga4gh.models;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link ExternalIdentifier} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ExternalIdentifierAssert extends AbstractAssert<ExternalIdentifierAssert, ExternalIdentifier> {

  /**
   * Creates a new <code>{@link ExternalIdentifierAssert}</code> to make assertions on actual ExternalIdentifier.
   * @param actual the ExternalIdentifier we want to make assertions on.
   */
  public ExternalIdentifierAssert(ExternalIdentifier actual) {
    super(actual, ExternalIdentifierAssert.class);
  }

  /**
   * An entry point for ExternalIdentifierAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myExternalIdentifier)</code> and get specific assertion with code completion.
   * @param actual the ExternalIdentifier we want to make assertions on.
   * @return a new <code>{@link ExternalIdentifierAssert}</code>
   */
  public static ExternalIdentifierAssert assertThat(ExternalIdentifier actual) {
    return new ExternalIdentifierAssert(actual);
  }

  /**
   * Verifies that the actual ExternalIdentifier's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual ExternalIdentifier's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ExternalIdentifier's classSchema is not equal to the given one.
   */
  public ExternalIdentifierAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual ExternalIdentifier we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ExternalIdentifier's database is equal to the given one.
   * @param database the given database to compare the actual ExternalIdentifier's database to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ExternalIdentifier's database is not equal to the given one.
   */
  public ExternalIdentifierAssert hasDatabase(String database) {
    // check that actual ExternalIdentifier we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting database of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDatabase = actual.getDatabase();
    if (!Objects.areEqual(actualDatabase, database)) {
      failWithMessage(assertjErrorMessage, actual, database, actualDatabase);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ExternalIdentifier's identifier is equal to the given one.
   * @param identifier the given identifier to compare the actual ExternalIdentifier's identifier to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ExternalIdentifier's identifier is not equal to the given one.
   */
  public ExternalIdentifierAssert hasIdentifier(String identifier) {
    // check that actual ExternalIdentifier we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting identifier of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualIdentifier = actual.getIdentifier();
    if (!Objects.areEqual(actualIdentifier, identifier)) {
      failWithMessage(assertjErrorMessage, actual, identifier, actualIdentifier);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ExternalIdentifier's schema is equal to the given one.
   * @param schema the given schema to compare the actual ExternalIdentifier's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ExternalIdentifier's schema is not equal to the given one.
   */
  public ExternalIdentifierAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual ExternalIdentifier we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ExternalIdentifier's version is equal to the given one.
   * @param version the given version to compare the actual ExternalIdentifier's version to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ExternalIdentifier's version is not equal to the given one.
   */
  public ExternalIdentifierAssert hasVersion(String version) {
    // check that actual ExternalIdentifier we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting version of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualVersion = actual.getVersion();
    if (!Objects.areEqual(actualVersion, version)) {
      failWithMessage(assertjErrorMessage, actual, version, actualVersion);
    }

    // return the current assertion for method chaining
    return this;
  }




}
