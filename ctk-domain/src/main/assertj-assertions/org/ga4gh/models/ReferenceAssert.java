package org.ga4gh.models;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link Reference} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ReferenceAssert extends AbstractAssert<ReferenceAssert, Reference> {

  /**
   * Creates a new <code>{@link ReferenceAssert}</code> to make assertions on actual Reference.
   * @param actual the Reference we want to make assertions on.
   */
  public ReferenceAssert(Reference actual) {
    super(actual, ReferenceAssert.class);
  }

  /**
   * An entry point for ReferenceAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myReference)</code> and get specific assertion with code completion.
   * @param actual the Reference we want to make assertions on.
   * @return a new <code>{@link ReferenceAssert}</code>
   */
  public static ReferenceAssert assertThat(Reference actual) {
    return new ReferenceAssert(actual);
  }

  /**
   * Verifies that the actual Reference's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual Reference's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Reference's classSchema is not equal to the given one.
   */
  public ReferenceAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual Reference we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Reference's id is equal to the given one.
   * @param id the given id to compare the actual Reference's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Reference's id is not equal to the given one.
   */
  public ReferenceAssert hasId(String id) {
    // check that actual Reference we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Reference's isDerived is equal to the given one.
   * @param isDerived the given isDerived to compare the actual Reference's isDerived to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Reference's isDerived is not equal to the given one.
   */
  public ReferenceAssert hasIsDerived(Boolean isDerived) {
    // check that actual Reference we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting isDerived of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Boolean actualIsDerived = actual.getIsDerived();
    if (!Objects.areEqual(actualIsDerived, isDerived)) {
      failWithMessage(assertjErrorMessage, actual, isDerived, actualIsDerived);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Reference's length is equal to the given one.
   * @param length the given length to compare the actual Reference's length to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Reference's length is not equal to the given one.
   */
  public ReferenceAssert hasLength(Long length) {
    // check that actual Reference we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting length of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualLength = actual.getLength();
    if (!Objects.areEqual(actualLength, length)) {
      failWithMessage(assertjErrorMessage, actual, length, actualLength);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Reference's md5checksum is equal to the given one.
   * @param md5checksum the given md5checksum to compare the actual Reference's md5checksum to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Reference's md5checksum is not equal to the given one.
   */
  public ReferenceAssert hasMd5checksum(String md5checksum) {
    // check that actual Reference we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting md5checksum of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualMd5checksum = actual.getMd5checksum();
    if (!Objects.areEqual(actualMd5checksum, md5checksum)) {
      failWithMessage(assertjErrorMessage, actual, md5checksum, actualMd5checksum);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Reference's name is equal to the given one.
   * @param name the given name to compare the actual Reference's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Reference's name is not equal to the given one.
   */
  public ReferenceAssert hasName(String name) {
    // check that actual Reference we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Reference's ncbiTaxonId is equal to the given one.
   * @param ncbiTaxonId the given ncbiTaxonId to compare the actual Reference's ncbiTaxonId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Reference's ncbiTaxonId is not equal to the given one.
   */
  public ReferenceAssert hasNcbiTaxonId(Integer ncbiTaxonId) {
    // check that actual Reference we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting ncbiTaxonId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualNcbiTaxonId = actual.getNcbiTaxonId();
    if (!Objects.areEqual(actualNcbiTaxonId, ncbiTaxonId)) {
      failWithMessage(assertjErrorMessage, actual, ncbiTaxonId, actualNcbiTaxonId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Reference's schema is equal to the given one.
   * @param schema the given schema to compare the actual Reference's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Reference's schema is not equal to the given one.
   */
  public ReferenceAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual Reference we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Reference's sourceAccessions contains the given String elements.
   * @param sourceAccessions the given elements that should be contained in actual Reference's sourceAccessions.
   * @return this assertion object.
   * @throws AssertionError if the actual Reference's sourceAccessions does not contain all given String elements.
   */
  public ReferenceAssert hasSourceAccessions(String... sourceAccessions) {
    // check that actual Reference we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (sourceAccessions == null) failWithMessage("Expecting sourceAccessions parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getSourceAccessions(), sourceAccessions);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Reference's sourceAccessions contains <b>only<b> the given String elements and nothing else in whatever order.
   * @param sourceAccessions the given elements that should be contained in actual Reference's sourceAccessions.
   * @return this assertion object.
   * @throws AssertionError if the actual Reference's sourceAccessions does not contain all given String elements.
   */
  public ReferenceAssert hasOnlySourceAccessions(String... sourceAccessions) {
    // check that actual Reference we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (sourceAccessions == null) failWithMessage("Expecting sourceAccessions parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getSourceAccessions(), sourceAccessions);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Reference's sourceAccessions does not contain the given String elements.
   *
   * @param sourceAccessions the given elements that should not be in actual Reference's sourceAccessions.
   * @return this assertion object.
   * @throws AssertionError if the actual Reference's sourceAccessions contains any given String elements.
   */
  public ReferenceAssert doesNotHaveSourceAccessions(String... sourceAccessions) {
    // check that actual Reference we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (sourceAccessions == null) failWithMessage("Expecting sourceAccessions parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getSourceAccessions(), sourceAccessions);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Reference has no sourceAccessions.
   * @return this assertion object.
   * @throws AssertionError if the actual Reference's sourceAccessions is not empty.
   */
  public ReferenceAssert hasNoSourceAccessions() {
    // check that actual Reference we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have sourceAccessions but had :\n  <%s>";
    
    // check
    if (actual.getSourceAccessions().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getSourceAccessions());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Reference's sourceDivergence is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param sourceDivergence the value to compare the actual Reference's sourceDivergence to.
   * @param offset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Reference's sourceDivergence is not close enough to the given value.
   */
  public ReferenceAssert hasSourceDivergence(Float sourceDivergence, Float offset) {
    // check that actual Reference we want to make assertions on is not null.
    isNotNull();

    Float actualSourceDivergence = actual.getSourceDivergence();
    
    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting sourceDivergence:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualSourceDivergence, sourceDivergence, offset, Math.abs(sourceDivergence - actualSourceDivergence));
    
    // check
    Assertions.assertThat(actualSourceDivergence).overridingErrorMessage(assertjErrorMessage).isCloseTo(sourceDivergence, Assertions.within(offset));

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Reference's sourceURI is equal to the given one.
   * @param sourceURI the given sourceURI to compare the actual Reference's sourceURI to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Reference's sourceURI is not equal to the given one.
   */
  public ReferenceAssert hasSourceURI(String sourceURI) {
    // check that actual Reference we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting sourceURI of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualSourceURI = actual.getSourceURI();
    if (!Objects.areEqual(actualSourceURI, sourceURI)) {
      failWithMessage(assertjErrorMessage, actual, sourceURI, actualSourceURI);
    }

    // return the current assertion for method chaining
    return this;
  }










}
