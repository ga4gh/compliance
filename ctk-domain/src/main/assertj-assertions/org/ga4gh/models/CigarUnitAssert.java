package org.ga4gh.models;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link CigarUnit} specific assertions - Generated by CustomAssertionGenerator.
 */
public class CigarUnitAssert extends AbstractAssert<CigarUnitAssert, CigarUnit> {

  /**
   * Creates a new <code>{@link CigarUnitAssert}</code> to make assertions on actual CigarUnit.
   * @param actual the CigarUnit we want to make assertions on.
   */
  public CigarUnitAssert(CigarUnit actual) {
    super(actual, CigarUnitAssert.class);
  }

  /**
   * An entry point for CigarUnitAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myCigarUnit)</code> and get specific assertion with code completion.
   * @param actual the CigarUnit we want to make assertions on.
   * @return a new <code>{@link CigarUnitAssert}</code>
   */
  public static CigarUnitAssert assertThat(CigarUnit actual) {
    return new CigarUnitAssert(actual);
  }

  /**
   * Verifies that the actual CigarUnit's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual CigarUnit's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CigarUnit's classSchema is not equal to the given one.
   */
  public CigarUnitAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual CigarUnit we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CigarUnit's operation is equal to the given one.
   * @param operation the given operation to compare the actual CigarUnit's operation to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CigarUnit's operation is not equal to the given one.
   */
  public CigarUnitAssert hasOperation(CigarOperation operation) {
    // check that actual CigarUnit we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting operation of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    CigarOperation actualOperation = actual.getOperation();
    if (!Objects.areEqual(actualOperation, operation)) {
      failWithMessage(assertjErrorMessage, actual, operation, actualOperation);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CigarUnit's operationLength is equal to the given one.
   * @param operationLength the given operationLength to compare the actual CigarUnit's operationLength to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CigarUnit's operationLength is not equal to the given one.
   */
  public CigarUnitAssert hasOperationLength(Long operationLength) {
    // check that actual CigarUnit we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting operationLength of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualOperationLength = actual.getOperationLength();
    if (!Objects.areEqual(actualOperationLength, operationLength)) {
      failWithMessage(assertjErrorMessage, actual, operationLength, actualOperationLength);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CigarUnit's referenceSequence is equal to the given one.
   * @param referenceSequence the given referenceSequence to compare the actual CigarUnit's referenceSequence to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CigarUnit's referenceSequence is not equal to the given one.
   */
  public CigarUnitAssert hasReferenceSequence(String referenceSequence) {
    // check that actual CigarUnit we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting referenceSequence of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualReferenceSequence = actual.getReferenceSequence();
    if (!Objects.areEqual(actualReferenceSequence, referenceSequence)) {
      failWithMessage(assertjErrorMessage, actual, referenceSequence, actualReferenceSequence);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CigarUnit's schema is equal to the given one.
   * @param schema the given schema to compare the actual CigarUnit's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CigarUnit's schema is not equal to the given one.
   */
  public CigarUnitAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual CigarUnit we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }




}
