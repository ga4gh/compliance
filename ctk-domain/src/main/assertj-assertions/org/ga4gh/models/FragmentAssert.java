package org.ga4gh.models;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link Fragment} specific assertions - Generated by CustomAssertionGenerator.
 */
public class FragmentAssert extends AbstractAssert<FragmentAssert, Fragment> {

  /**
   * Creates a new <code>{@link FragmentAssert}</code> to make assertions on actual Fragment.
   * @param actual the Fragment we want to make assertions on.
   */
  public FragmentAssert(Fragment actual) {
    super(actual, FragmentAssert.class);
  }

  /**
   * An entry point for FragmentAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myFragment)</code> and get specific assertion with code completion.
   * @param actual the Fragment we want to make assertions on.
   * @return a new <code>{@link FragmentAssert}</code>
   */
  public static FragmentAssert assertThat(Fragment actual) {
    return new FragmentAssert(actual);
  }

  /**
   * Verifies that the actual Fragment's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual Fragment's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Fragment's classSchema is not equal to the given one.
   */
  public FragmentAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual Fragment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Fragment's id is equal to the given one.
   * @param id the given id to compare the actual Fragment's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Fragment's id is not equal to the given one.
   */
  public FragmentAssert hasId(String id) {
    // check that actual Fragment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Fragment's schema is equal to the given one.
   * @param schema the given schema to compare the actual Fragment's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Fragment's schema is not equal to the given one.
   */
  public FragmentAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual Fragment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }


}
