package org.ga4gh.models;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link Call} specific assertions - Generated by CustomAssertionGenerator.
 */
public class CallAssert extends AbstractAssert<CallAssert, Call> {

  /**
   * Creates a new <code>{@link CallAssert}</code> to make assertions on actual Call.
   * @param actual the Call we want to make assertions on.
   */
  public CallAssert(Call actual) {
    super(actual, CallAssert.class);
  }

  /**
   * An entry point for CallAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myCall)</code> and get specific assertion with code completion.
   * @param actual the Call we want to make assertions on.
   * @return a new <code>{@link CallAssert}</code>
   */
  public static CallAssert assertThat(Call actual) {
    return new CallAssert(actual);
  }

  /**
   * Verifies that the actual Call's callSetId is equal to the given one.
   * @param callSetId the given callSetId to compare the actual Call's callSetId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Call's callSetId is not equal to the given one.
   */
  public CallAssert hasCallSetId(String callSetId) {
    // check that actual Call we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting callSetId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualCallSetId = actual.getCallSetId();
    if (!Objects.areEqual(actualCallSetId, callSetId)) {
      failWithMessage(assertjErrorMessage, actual, callSetId, actualCallSetId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Call's callSetName is equal to the given one.
   * @param callSetName the given callSetName to compare the actual Call's callSetName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Call's callSetName is not equal to the given one.
   */
  public CallAssert hasCallSetName(String callSetName) {
    // check that actual Call we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting callSetName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualCallSetName = actual.getCallSetName();
    if (!Objects.areEqual(actualCallSetName, callSetName)) {
      failWithMessage(assertjErrorMessage, actual, callSetName, actualCallSetName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Call's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual Call's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Call's classSchema is not equal to the given one.
   */
  public CallAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual Call we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Call's genotype contains the given Integer elements.
   * @param genotype the given elements that should be contained in actual Call's genotype.
   * @return this assertion object.
   * @throws AssertionError if the actual Call's genotype does not contain all given Integer elements.
   */
  public CallAssert hasGenotype(Integer... genotype) {
    // check that actual Call we want to make assertions on is not null.
    isNotNull();

    // check that given Integer varargs is not null.
    if (genotype == null) failWithMessage("Expecting genotype parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getGenotype(), genotype);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Call's genotype contains <b>only<b> the given Integer elements and nothing else in whatever order.
   * @param genotype the given elements that should be contained in actual Call's genotype.
   * @return this assertion object.
   * @throws AssertionError if the actual Call's genotype does not contain all given Integer elements.
   */
  public CallAssert hasOnlyGenotype(Integer... genotype) {
    // check that actual Call we want to make assertions on is not null.
    isNotNull();

    // check that given Integer varargs is not null.
    if (genotype == null) failWithMessage("Expecting genotype parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getGenotype(), genotype);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Call's genotype does not contain the given Integer elements.
   *
   * @param genotype the given elements that should not be in actual Call's genotype.
   * @return this assertion object.
   * @throws AssertionError if the actual Call's genotype contains any given Integer elements.
   */
  public CallAssert doesNotHaveGenotype(Integer... genotype) {
    // check that actual Call we want to make assertions on is not null.
    isNotNull();

    // check that given Integer varargs is not null.
    if (genotype == null) failWithMessage("Expecting genotype parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getGenotype(), genotype);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Call has no genotype.
   * @return this assertion object.
   * @throws AssertionError if the actual Call's genotype is not empty.
   */
  public CallAssert hasNoGenotype() {
    // check that actual Call we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have genotype but had :\n  <%s>";
    
    // check
    if (actual.getGenotype().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getGenotype());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Call's genotypeLikelihood contains the given Double elements.
   * @param genotypeLikelihood the given elements that should be contained in actual Call's genotypeLikelihood.
   * @return this assertion object.
   * @throws AssertionError if the actual Call's genotypeLikelihood does not contain all given Double elements.
   */
  public CallAssert hasGenotypeLikelihood(Double... genotypeLikelihood) {
    // check that actual Call we want to make assertions on is not null.
    isNotNull();

    // check that given Double varargs is not null.
    if (genotypeLikelihood == null) failWithMessage("Expecting genotypeLikelihood parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getGenotypeLikelihood(), genotypeLikelihood);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Call's genotypeLikelihood contains <b>only<b> the given Double elements and nothing else in whatever order.
   * @param genotypeLikelihood the given elements that should be contained in actual Call's genotypeLikelihood.
   * @return this assertion object.
   * @throws AssertionError if the actual Call's genotypeLikelihood does not contain all given Double elements.
   */
  public CallAssert hasOnlyGenotypeLikelihood(Double... genotypeLikelihood) {
    // check that actual Call we want to make assertions on is not null.
    isNotNull();

    // check that given Double varargs is not null.
    if (genotypeLikelihood == null) failWithMessage("Expecting genotypeLikelihood parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getGenotypeLikelihood(), genotypeLikelihood);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Call's genotypeLikelihood does not contain the given Double elements.
   *
   * @param genotypeLikelihood the given elements that should not be in actual Call's genotypeLikelihood.
   * @return this assertion object.
   * @throws AssertionError if the actual Call's genotypeLikelihood contains any given Double elements.
   */
  public CallAssert doesNotHaveGenotypeLikelihood(Double... genotypeLikelihood) {
    // check that actual Call we want to make assertions on is not null.
    isNotNull();

    // check that given Double varargs is not null.
    if (genotypeLikelihood == null) failWithMessage("Expecting genotypeLikelihood parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getGenotypeLikelihood(), genotypeLikelihood);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Call has no genotypeLikelihood.
   * @return this assertion object.
   * @throws AssertionError if the actual Call's genotypeLikelihood is not empty.
   */
  public CallAssert hasNoGenotypeLikelihood() {
    // check that actual Call we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have genotypeLikelihood but had :\n  <%s>";
    
    // check
    if (actual.getGenotypeLikelihood().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getGenotypeLikelihood());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Call's info is equal to the given one.
   * @param info the given info to compare the actual Call's info to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Call's info is not equal to the given one.
   */
  public CallAssert hasInfo(java.util.Map info) {
    // check that actual Call we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting info of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualInfo = actual.getInfo();
    if (!Objects.areEqual(actualInfo, info)) {
      failWithMessage(assertjErrorMessage, actual, info, actualInfo);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Call's phaseset is equal to the given one.
   * @param phaseset the given phaseset to compare the actual Call's phaseset to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Call's phaseset is not equal to the given one.
   */
  public CallAssert hasPhaseset(String phaseset) {
    // check that actual Call we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting phaseset of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPhaseset = actual.getPhaseset();
    if (!Objects.areEqual(actualPhaseset, phaseset)) {
      failWithMessage(assertjErrorMessage, actual, phaseset, actualPhaseset);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Call's schema is equal to the given one.
   * @param schema the given schema to compare the actual Call's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Call's schema is not equal to the given one.
   */
  public CallAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual Call we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }







}
