package org.ga4gh.models;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link CigarOperation} specific assertions - Generated by CustomAssertionGenerator.
 */
public class CigarOperationAssert extends AbstractAssert<CigarOperationAssert, CigarOperation> {

  /**
   * Creates a new <code>{@link CigarOperationAssert}</code> to make assertions on actual CigarOperation.
   * @param actual the CigarOperation we want to make assertions on.
   */
  public CigarOperationAssert(CigarOperation actual) {
    super(actual, CigarOperationAssert.class);
  }

  /**
   * An entry point for CigarOperationAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myCigarOperation)</code> and get specific assertion with code completion.
   * @param actual the CigarOperation we want to make assertions on.
   * @return a new <code>{@link CigarOperationAssert}</code>
   */
  public static CigarOperationAssert assertThat(CigarOperation actual) {
    return new CigarOperationAssert(actual);
  }

  /**
   * Verifies that the actual CigarOperation's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual CigarOperation's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CigarOperation's classSchema is not equal to the given one.
   */
  public CigarOperationAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual CigarOperation we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

}
