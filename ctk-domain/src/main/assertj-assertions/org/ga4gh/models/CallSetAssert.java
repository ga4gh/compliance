package org.ga4gh.models;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link CallSet} specific assertions - Generated by CustomAssertionGenerator.
 */
public class CallSetAssert extends AbstractAssert<CallSetAssert, CallSet> {

  /**
   * Creates a new <code>{@link CallSetAssert}</code> to make assertions on actual CallSet.
   * @param actual the CallSet we want to make assertions on.
   */
  public CallSetAssert(CallSet actual) {
    super(actual, CallSetAssert.class);
  }

  /**
   * An entry point for CallSetAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myCallSet)</code> and get specific assertion with code completion.
   * @param actual the CallSet we want to make assertions on.
   * @return a new <code>{@link CallSetAssert}</code>
   */
  public static CallSetAssert assertThat(CallSet actual) {
    return new CallSetAssert(actual);
  }

  /**
   * Verifies that the actual CallSet's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual CallSet's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CallSet's classSchema is not equal to the given one.
   */
  public CallSetAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual CallSet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CallSet's created is equal to the given one.
   * @param created the given created to compare the actual CallSet's created to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CallSet's created is not equal to the given one.
   */
  public CallSetAssert hasCreated(Long created) {
    // check that actual CallSet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting created of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualCreated = actual.getCreated();
    if (!Objects.areEqual(actualCreated, created)) {
      failWithMessage(assertjErrorMessage, actual, created, actualCreated);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CallSet's id is equal to the given one.
   * @param id the given id to compare the actual CallSet's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CallSet's id is not equal to the given one.
   */
  public CallSetAssert hasId(String id) {
    // check that actual CallSet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CallSet's info is equal to the given one.
   * @param info the given info to compare the actual CallSet's info to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CallSet's info is not equal to the given one.
   */
  public CallSetAssert hasInfo(java.util.Map info) {
    // check that actual CallSet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting info of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualInfo = actual.getInfo();
    if (!Objects.areEqual(actualInfo, info)) {
      failWithMessage(assertjErrorMessage, actual, info, actualInfo);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CallSet's name is equal to the given one.
   * @param name the given name to compare the actual CallSet's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CallSet's name is not equal to the given one.
   */
  public CallSetAssert hasName(String name) {
    // check that actual CallSet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CallSet's sampleId is equal to the given one.
   * @param sampleId the given sampleId to compare the actual CallSet's sampleId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CallSet's sampleId is not equal to the given one.
   */
  public CallSetAssert hasSampleId(String sampleId) {
    // check that actual CallSet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting sampleId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualSampleId = actual.getSampleId();
    if (!Objects.areEqual(actualSampleId, sampleId)) {
      failWithMessage(assertjErrorMessage, actual, sampleId, actualSampleId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CallSet's schema is equal to the given one.
   * @param schema the given schema to compare the actual CallSet's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CallSet's schema is not equal to the given one.
   */
  public CallSetAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual CallSet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CallSet's updated is equal to the given one.
   * @param updated the given updated to compare the actual CallSet's updated to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CallSet's updated is not equal to the given one.
   */
  public CallSetAssert hasUpdated(Long updated) {
    // check that actual CallSet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting updated of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualUpdated = actual.getUpdated();
    if (!Objects.areEqual(actualUpdated, updated)) {
      failWithMessage(assertjErrorMessage, actual, updated, actualUpdated);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CallSet's variantSetIds contains the given String elements.
   * @param variantSetIds the given elements that should be contained in actual CallSet's variantSetIds.
   * @return this assertion object.
   * @throws AssertionError if the actual CallSet's variantSetIds does not contain all given String elements.
   */
  public CallSetAssert hasVariantSetIds(String... variantSetIds) {
    // check that actual CallSet we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (variantSetIds == null) failWithMessage("Expecting variantSetIds parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getVariantSetIds(), variantSetIds);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CallSet's variantSetIds contains <b>only<b> the given String elements and nothing else in whatever order.
   * @param variantSetIds the given elements that should be contained in actual CallSet's variantSetIds.
   * @return this assertion object.
   * @throws AssertionError if the actual CallSet's variantSetIds does not contain all given String elements.
   */
  public CallSetAssert hasOnlyVariantSetIds(String... variantSetIds) {
    // check that actual CallSet we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (variantSetIds == null) failWithMessage("Expecting variantSetIds parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getVariantSetIds(), variantSetIds);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CallSet's variantSetIds does not contain the given String elements.
   *
   * @param variantSetIds the given elements that should not be in actual CallSet's variantSetIds.
   * @return this assertion object.
   * @throws AssertionError if the actual CallSet's variantSetIds contains any given String elements.
   */
  public CallSetAssert doesNotHaveVariantSetIds(String... variantSetIds) {
    // check that actual CallSet we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (variantSetIds == null) failWithMessage("Expecting variantSetIds parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getVariantSetIds(), variantSetIds);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual CallSet has no variantSetIds.
   * @return this assertion object.
   * @throws AssertionError if the actual CallSet's variantSetIds is not empty.
   */
  public CallSetAssert hasNoVariantSetIds() {
    // check that actual CallSet we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have variantSetIds but had :\n  <%s>";
    
    // check
    if (actual.getVariantSetIds().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getVariantSetIds());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  








}
