package org.ga4gh.models;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link ReadGroupSet} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ReadGroupSetAssert extends AbstractAssert<ReadGroupSetAssert, ReadGroupSet> {

  /**
   * Creates a new <code>{@link ReadGroupSetAssert}</code> to make assertions on actual ReadGroupSet.
   * @param actual the ReadGroupSet we want to make assertions on.
   */
  public ReadGroupSetAssert(ReadGroupSet actual) {
    super(actual, ReadGroupSetAssert.class);
  }

  /**
   * An entry point for ReadGroupSetAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myReadGroupSet)</code> and get specific assertion with code completion.
   * @param actual the ReadGroupSet we want to make assertions on.
   * @return a new <code>{@link ReadGroupSetAssert}</code>
   */
  public static ReadGroupSetAssert assertThat(ReadGroupSet actual) {
    return new ReadGroupSetAssert(actual);
  }

  /**
   * Verifies that the actual ReadGroupSet's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual ReadGroupSet's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadGroupSet's classSchema is not equal to the given one.
   */
  public ReadGroupSetAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual ReadGroupSet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadGroupSet's datasetId is equal to the given one.
   * @param datasetId the given datasetId to compare the actual ReadGroupSet's datasetId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadGroupSet's datasetId is not equal to the given one.
   */
  public ReadGroupSetAssert hasDatasetId(String datasetId) {
    // check that actual ReadGroupSet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting datasetId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDatasetId = actual.getDatasetId();
    if (!Objects.areEqual(actualDatasetId, datasetId)) {
      failWithMessage(assertjErrorMessage, actual, datasetId, actualDatasetId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadGroupSet's id is equal to the given one.
   * @param id the given id to compare the actual ReadGroupSet's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadGroupSet's id is not equal to the given one.
   */
  public ReadGroupSetAssert hasId(String id) {
    // check that actual ReadGroupSet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadGroupSet's name is equal to the given one.
   * @param name the given name to compare the actual ReadGroupSet's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadGroupSet's name is not equal to the given one.
   */
  public ReadGroupSetAssert hasName(String name) {
    // check that actual ReadGroupSet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadGroupSet's readGroups contains the given ReadGroup elements.
   * @param readGroups the given elements that should be contained in actual ReadGroupSet's readGroups.
   * @return this assertion object.
   * @throws AssertionError if the actual ReadGroupSet's readGroups does not contain all given ReadGroup elements.
   */
  public ReadGroupSetAssert hasReadGroups(ReadGroup... readGroups) {
    // check that actual ReadGroupSet we want to make assertions on is not null.
    isNotNull();

    // check that given ReadGroup varargs is not null.
    if (readGroups == null) failWithMessage("Expecting readGroups parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getReadGroups(), readGroups);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadGroupSet's readGroups contains <b>only<b> the given ReadGroup elements and nothing else in whatever order.
   * @param readGroups the given elements that should be contained in actual ReadGroupSet's readGroups.
   * @return this assertion object.
   * @throws AssertionError if the actual ReadGroupSet's readGroups does not contain all given ReadGroup elements.
   */
  public ReadGroupSetAssert hasOnlyReadGroups(ReadGroup... readGroups) {
    // check that actual ReadGroupSet we want to make assertions on is not null.
    isNotNull();

    // check that given ReadGroup varargs is not null.
    if (readGroups == null) failWithMessage("Expecting readGroups parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getReadGroups(), readGroups);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadGroupSet's readGroups does not contain the given ReadGroup elements.
   *
   * @param readGroups the given elements that should not be in actual ReadGroupSet's readGroups.
   * @return this assertion object.
   * @throws AssertionError if the actual ReadGroupSet's readGroups contains any given ReadGroup elements.
   */
  public ReadGroupSetAssert doesNotHaveReadGroups(ReadGroup... readGroups) {
    // check that actual ReadGroupSet we want to make assertions on is not null.
    isNotNull();

    // check that given ReadGroup varargs is not null.
    if (readGroups == null) failWithMessage("Expecting readGroups parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getReadGroups(), readGroups);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadGroupSet has no readGroups.
   * @return this assertion object.
   * @throws AssertionError if the actual ReadGroupSet's readGroups is not empty.
   */
  public ReadGroupSetAssert hasNoReadGroups() {
    // check that actual ReadGroupSet we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have readGroups but had :\n  <%s>";
    
    // check
    if (actual.getReadGroups().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getReadGroups());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual ReadGroupSet's schema is equal to the given one.
   * @param schema the given schema to compare the actual ReadGroupSet's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadGroupSet's schema is not equal to the given one.
   */
  public ReadGroupSetAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual ReadGroupSet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadGroupSet's stats is equal to the given one.
   * @param stats the given stats to compare the actual ReadGroupSet's stats to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadGroupSet's stats is not equal to the given one.
   */
  public ReadGroupSetAssert hasStats(ReadStats stats) {
    // check that actual ReadGroupSet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting stats of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    ReadStats actualStats = actual.getStats();
    if (!Objects.areEqual(actualStats, stats)) {
      failWithMessage(assertjErrorMessage, actual, stats, actualStats);
    }

    // return the current assertion for method chaining
    return this;
  }






}
