package org.ga4gh.models;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link Experiment} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ExperimentAssert extends AbstractAssert<ExperimentAssert, Experiment> {

  /**
   * Creates a new <code>{@link ExperimentAssert}</code> to make assertions on actual Experiment.
   * @param actual the Experiment we want to make assertions on.
   */
  public ExperimentAssert(Experiment actual) {
    super(actual, ExperimentAssert.class);
  }

  /**
   * An entry point for ExperimentAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myExperiment)</code> and get specific assertion with code completion.
   * @param actual the Experiment we want to make assertions on.
   * @return a new <code>{@link ExperimentAssert}</code>
   */
  public static ExperimentAssert assertThat(Experiment actual) {
    return new ExperimentAssert(actual);
  }

  /**
   * Verifies that the actual Experiment's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual Experiment's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Experiment's classSchema is not equal to the given one.
   */
  public ExperimentAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual Experiment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Experiment's description is equal to the given one.
   * @param description the given description to compare the actual Experiment's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Experiment's description is not equal to the given one.
   */
  public ExperimentAssert hasDescription(String description) {
    // check that actual Experiment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDescription = actual.getDescription();
    if (!Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Experiment's id is equal to the given one.
   * @param id the given id to compare the actual Experiment's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Experiment's id is not equal to the given one.
   */
  public ExperimentAssert hasId(String id) {
    // check that actual Experiment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Experiment's info is equal to the given one.
   * @param info the given info to compare the actual Experiment's info to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Experiment's info is not equal to the given one.
   */
  public ExperimentAssert hasInfo(java.util.Map info) {
    // check that actual Experiment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting info of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualInfo = actual.getInfo();
    if (!Objects.areEqual(actualInfo, info)) {
      failWithMessage(assertjErrorMessage, actual, info, actualInfo);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Experiment's instrumentDataFile is equal to the given one.
   * @param instrumentDataFile the given instrumentDataFile to compare the actual Experiment's instrumentDataFile to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Experiment's instrumentDataFile is not equal to the given one.
   */
  public ExperimentAssert hasInstrumentDataFile(String instrumentDataFile) {
    // check that actual Experiment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting instrumentDataFile of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualInstrumentDataFile = actual.getInstrumentDataFile();
    if (!Objects.areEqual(actualInstrumentDataFile, instrumentDataFile)) {
      failWithMessage(assertjErrorMessage, actual, instrumentDataFile, actualInstrumentDataFile);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Experiment's instrumentModel is equal to the given one.
   * @param instrumentModel the given instrumentModel to compare the actual Experiment's instrumentModel to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Experiment's instrumentModel is not equal to the given one.
   */
  public ExperimentAssert hasInstrumentModel(String instrumentModel) {
    // check that actual Experiment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting instrumentModel of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualInstrumentModel = actual.getInstrumentModel();
    if (!Objects.areEqual(actualInstrumentModel, instrumentModel)) {
      failWithMessage(assertjErrorMessage, actual, instrumentModel, actualInstrumentModel);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Experiment's library is equal to the given one.
   * @param library the given library to compare the actual Experiment's library to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Experiment's library is not equal to the given one.
   */
  public ExperimentAssert hasLibrary(String library) {
    // check that actual Experiment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting library of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualLibrary = actual.getLibrary();
    if (!Objects.areEqual(actualLibrary, library)) {
      failWithMessage(assertjErrorMessage, actual, library, actualLibrary);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Experiment's libraryLayout is equal to the given one.
   * @param libraryLayout the given libraryLayout to compare the actual Experiment's libraryLayout to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Experiment's libraryLayout is not equal to the given one.
   */
  public ExperimentAssert hasLibraryLayout(String libraryLayout) {
    // check that actual Experiment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting libraryLayout of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualLibraryLayout = actual.getLibraryLayout();
    if (!Objects.areEqual(actualLibraryLayout, libraryLayout)) {
      failWithMessage(assertjErrorMessage, actual, libraryLayout, actualLibraryLayout);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Experiment's molecule is equal to the given one.
   * @param molecule the given molecule to compare the actual Experiment's molecule to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Experiment's molecule is not equal to the given one.
   */
  public ExperimentAssert hasMolecule(String molecule) {
    // check that actual Experiment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting molecule of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualMolecule = actual.getMolecule();
    if (!Objects.areEqual(actualMolecule, molecule)) {
      failWithMessage(assertjErrorMessage, actual, molecule, actualMolecule);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Experiment's name is equal to the given one.
   * @param name the given name to compare the actual Experiment's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Experiment's name is not equal to the given one.
   */
  public ExperimentAssert hasName(String name) {
    // check that actual Experiment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Experiment's platformUnit is equal to the given one.
   * @param platformUnit the given platformUnit to compare the actual Experiment's platformUnit to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Experiment's platformUnit is not equal to the given one.
   */
  public ExperimentAssert hasPlatformUnit(String platformUnit) {
    // check that actual Experiment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting platformUnit of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPlatformUnit = actual.getPlatformUnit();
    if (!Objects.areEqual(actualPlatformUnit, platformUnit)) {
      failWithMessage(assertjErrorMessage, actual, platformUnit, actualPlatformUnit);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Experiment's recordCreateTime is equal to the given one.
   * @param recordCreateTime the given recordCreateTime to compare the actual Experiment's recordCreateTime to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Experiment's recordCreateTime is not equal to the given one.
   */
  public ExperimentAssert hasRecordCreateTime(String recordCreateTime) {
    // check that actual Experiment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting recordCreateTime of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualRecordCreateTime = actual.getRecordCreateTime();
    if (!Objects.areEqual(actualRecordCreateTime, recordCreateTime)) {
      failWithMessage(assertjErrorMessage, actual, recordCreateTime, actualRecordCreateTime);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Experiment's recordUpdateTime is equal to the given one.
   * @param recordUpdateTime the given recordUpdateTime to compare the actual Experiment's recordUpdateTime to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Experiment's recordUpdateTime is not equal to the given one.
   */
  public ExperimentAssert hasRecordUpdateTime(String recordUpdateTime) {
    // check that actual Experiment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting recordUpdateTime of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualRecordUpdateTime = actual.getRecordUpdateTime();
    if (!Objects.areEqual(actualRecordUpdateTime, recordUpdateTime)) {
      failWithMessage(assertjErrorMessage, actual, recordUpdateTime, actualRecordUpdateTime);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Experiment's runTime is equal to the given one.
   * @param runTime the given runTime to compare the actual Experiment's runTime to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Experiment's runTime is not equal to the given one.
   */
  public ExperimentAssert hasRunTime(String runTime) {
    // check that actual Experiment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting runTime of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualRunTime = actual.getRunTime();
    if (!Objects.areEqual(actualRunTime, runTime)) {
      failWithMessage(assertjErrorMessage, actual, runTime, actualRunTime);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Experiment's schema is equal to the given one.
   * @param schema the given schema to compare the actual Experiment's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Experiment's schema is not equal to the given one.
   */
  public ExperimentAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual Experiment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Experiment's selection is equal to the given one.
   * @param selection the given selection to compare the actual Experiment's selection to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Experiment's selection is not equal to the given one.
   */
  public ExperimentAssert hasSelection(String selection) {
    // check that actual Experiment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting selection of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualSelection = actual.getSelection();
    if (!Objects.areEqual(actualSelection, selection)) {
      failWithMessage(assertjErrorMessage, actual, selection, actualSelection);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Experiment's sequencingCenter is equal to the given one.
   * @param sequencingCenter the given sequencingCenter to compare the actual Experiment's sequencingCenter to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Experiment's sequencingCenter is not equal to the given one.
   */
  public ExperimentAssert hasSequencingCenter(String sequencingCenter) {
    // check that actual Experiment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting sequencingCenter of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualSequencingCenter = actual.getSequencingCenter();
    if (!Objects.areEqual(actualSequencingCenter, sequencingCenter)) {
      failWithMessage(assertjErrorMessage, actual, sequencingCenter, actualSequencingCenter);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Experiment's strategy is equal to the given one.
   * @param strategy the given strategy to compare the actual Experiment's strategy to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Experiment's strategy is not equal to the given one.
   */
  public ExperimentAssert hasStrategy(String strategy) {
    // check that actual Experiment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting strategy of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualStrategy = actual.getStrategy();
    if (!Objects.areEqual(actualStrategy, strategy)) {
      failWithMessage(assertjErrorMessage, actual, strategy, actualStrategy);
    }

    // return the current assertion for method chaining
    return this;
  }

















}
