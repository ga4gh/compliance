package org.ga4gh.models;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link Variant} specific assertions - Generated by CustomAssertionGenerator.
 */
public class VariantAssert extends AbstractAssert<VariantAssert, Variant> {

  /**
   * Creates a new <code>{@link VariantAssert}</code> to make assertions on actual Variant.
   * @param actual the Variant we want to make assertions on.
   */
  public VariantAssert(Variant actual) {
    super(actual, VariantAssert.class);
  }

  /**
   * An entry point for VariantAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myVariant)</code> and get specific assertion with code completion.
   * @param actual the Variant we want to make assertions on.
   * @return a new <code>{@link VariantAssert}</code>
   */
  public static VariantAssert assertThat(Variant actual) {
    return new VariantAssert(actual);
  }

  /**
   * Verifies that the actual Variant's alternateBases contains the given String elements.
   * @param alternateBases the given elements that should be contained in actual Variant's alternateBases.
   * @return this assertion object.
   * @throws AssertionError if the actual Variant's alternateBases does not contain all given String elements.
   */
  public VariantAssert hasAlternateBases(String... alternateBases) {
    // check that actual Variant we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (alternateBases == null) failWithMessage("Expecting alternateBases parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getAlternateBases(), alternateBases);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Variant's alternateBases contains <b>only<b> the given String elements and nothing else in whatever order.
   * @param alternateBases the given elements that should be contained in actual Variant's alternateBases.
   * @return this assertion object.
   * @throws AssertionError if the actual Variant's alternateBases does not contain all given String elements.
   */
  public VariantAssert hasOnlyAlternateBases(String... alternateBases) {
    // check that actual Variant we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (alternateBases == null) failWithMessage("Expecting alternateBases parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getAlternateBases(), alternateBases);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Variant's alternateBases does not contain the given String elements.
   *
   * @param alternateBases the given elements that should not be in actual Variant's alternateBases.
   * @return this assertion object.
   * @throws AssertionError if the actual Variant's alternateBases contains any given String elements.
   */
  public VariantAssert doesNotHaveAlternateBases(String... alternateBases) {
    // check that actual Variant we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (alternateBases == null) failWithMessage("Expecting alternateBases parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getAlternateBases(), alternateBases);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Variant has no alternateBases.
   * @return this assertion object.
   * @throws AssertionError if the actual Variant's alternateBases is not empty.
   */
  public VariantAssert hasNoAlternateBases() {
    // check that actual Variant we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have alternateBases but had :\n  <%s>";
    
    // check
    if (actual.getAlternateBases().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getAlternateBases());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Variant's calls contains the given Call elements.
   * @param calls the given elements that should be contained in actual Variant's calls.
   * @return this assertion object.
   * @throws AssertionError if the actual Variant's calls does not contain all given Call elements.
   */
  public VariantAssert hasCalls(Call... calls) {
    // check that actual Variant we want to make assertions on is not null.
    isNotNull();

    // check that given Call varargs is not null.
    if (calls == null) failWithMessage("Expecting calls parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getCalls(), calls);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Variant's calls contains <b>only<b> the given Call elements and nothing else in whatever order.
   * @param calls the given elements that should be contained in actual Variant's calls.
   * @return this assertion object.
   * @throws AssertionError if the actual Variant's calls does not contain all given Call elements.
   */
  public VariantAssert hasOnlyCalls(Call... calls) {
    // check that actual Variant we want to make assertions on is not null.
    isNotNull();

    // check that given Call varargs is not null.
    if (calls == null) failWithMessage("Expecting calls parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getCalls(), calls);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Variant's calls does not contain the given Call elements.
   *
   * @param calls the given elements that should not be in actual Variant's calls.
   * @return this assertion object.
   * @throws AssertionError if the actual Variant's calls contains any given Call elements.
   */
  public VariantAssert doesNotHaveCalls(Call... calls) {
    // check that actual Variant we want to make assertions on is not null.
    isNotNull();

    // check that given Call varargs is not null.
    if (calls == null) failWithMessage("Expecting calls parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getCalls(), calls);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Variant has no calls.
   * @return this assertion object.
   * @throws AssertionError if the actual Variant's calls is not empty.
   */
  public VariantAssert hasNoCalls() {
    // check that actual Variant we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have calls but had :\n  <%s>";
    
    // check
    if (actual.getCalls().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getCalls());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Variant's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual Variant's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Variant's classSchema is not equal to the given one.
   */
  public VariantAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual Variant we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Variant's created is equal to the given one.
   * @param created the given created to compare the actual Variant's created to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Variant's created is not equal to the given one.
   */
  public VariantAssert hasCreated(Long created) {
    // check that actual Variant we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting created of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualCreated = actual.getCreated();
    if (!Objects.areEqual(actualCreated, created)) {
      failWithMessage(assertjErrorMessage, actual, created, actualCreated);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Variant's end is equal to the given one.
   * @param end the given end to compare the actual Variant's end to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Variant's end is not equal to the given one.
   */
  public VariantAssert hasEnd(Long end) {
    // check that actual Variant we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting end of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualEnd = actual.getEnd();
    if (!Objects.areEqual(actualEnd, end)) {
      failWithMessage(assertjErrorMessage, actual, end, actualEnd);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Variant's id is equal to the given one.
   * @param id the given id to compare the actual Variant's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Variant's id is not equal to the given one.
   */
  public VariantAssert hasId(String id) {
    // check that actual Variant we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Variant's info is equal to the given one.
   * @param info the given info to compare the actual Variant's info to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Variant's info is not equal to the given one.
   */
  public VariantAssert hasInfo(java.util.Map info) {
    // check that actual Variant we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting info of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualInfo = actual.getInfo();
    if (!Objects.areEqual(actualInfo, info)) {
      failWithMessage(assertjErrorMessage, actual, info, actualInfo);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Variant's names contains the given String elements.
   * @param names the given elements that should be contained in actual Variant's names.
   * @return this assertion object.
   * @throws AssertionError if the actual Variant's names does not contain all given String elements.
   */
  public VariantAssert hasNames(String... names) {
    // check that actual Variant we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (names == null) failWithMessage("Expecting names parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getNames(), names);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Variant's names contains <b>only<b> the given String elements and nothing else in whatever order.
   * @param names the given elements that should be contained in actual Variant's names.
   * @return this assertion object.
   * @throws AssertionError if the actual Variant's names does not contain all given String elements.
   */
  public VariantAssert hasOnlyNames(String... names) {
    // check that actual Variant we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (names == null) failWithMessage("Expecting names parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getNames(), names);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Variant's names does not contain the given String elements.
   *
   * @param names the given elements that should not be in actual Variant's names.
   * @return this assertion object.
   * @throws AssertionError if the actual Variant's names contains any given String elements.
   */
  public VariantAssert doesNotHaveNames(String... names) {
    // check that actual Variant we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (names == null) failWithMessage("Expecting names parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getNames(), names);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Variant has no names.
   * @return this assertion object.
   * @throws AssertionError if the actual Variant's names is not empty.
   */
  public VariantAssert hasNoNames() {
    // check that actual Variant we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have names but had :\n  <%s>";
    
    // check
    if (actual.getNames().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getNames());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Variant's referenceBases is equal to the given one.
   * @param referenceBases the given referenceBases to compare the actual Variant's referenceBases to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Variant's referenceBases is not equal to the given one.
   */
  public VariantAssert hasReferenceBases(String referenceBases) {
    // check that actual Variant we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting referenceBases of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualReferenceBases = actual.getReferenceBases();
    if (!Objects.areEqual(actualReferenceBases, referenceBases)) {
      failWithMessage(assertjErrorMessage, actual, referenceBases, actualReferenceBases);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Variant's referenceName is equal to the given one.
   * @param referenceName the given referenceName to compare the actual Variant's referenceName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Variant's referenceName is not equal to the given one.
   */
  public VariantAssert hasReferenceName(String referenceName) {
    // check that actual Variant we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting referenceName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualReferenceName = actual.getReferenceName();
    if (!Objects.areEqual(actualReferenceName, referenceName)) {
      failWithMessage(assertjErrorMessage, actual, referenceName, actualReferenceName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Variant's schema is equal to the given one.
   * @param schema the given schema to compare the actual Variant's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Variant's schema is not equal to the given one.
   */
  public VariantAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual Variant we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Variant's start is equal to the given one.
   * @param start the given start to compare the actual Variant's start to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Variant's start is not equal to the given one.
   */
  public VariantAssert hasStart(Long start) {
    // check that actual Variant we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting start of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualStart = actual.getStart();
    if (!Objects.areEqual(actualStart, start)) {
      failWithMessage(assertjErrorMessage, actual, start, actualStart);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Variant's updated is equal to the given one.
   * @param updated the given updated to compare the actual Variant's updated to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Variant's updated is not equal to the given one.
   */
  public VariantAssert hasUpdated(Long updated) {
    // check that actual Variant we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting updated of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualUpdated = actual.getUpdated();
    if (!Objects.areEqual(actualUpdated, updated)) {
      failWithMessage(assertjErrorMessage, actual, updated, actualUpdated);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Variant's variantSetId is equal to the given one.
   * @param variantSetId the given variantSetId to compare the actual Variant's variantSetId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Variant's variantSetId is not equal to the given one.
   */
  public VariantAssert hasVariantSetId(String variantSetId) {
    // check that actual Variant we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting variantSetId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualVariantSetId = actual.getVariantSetId();
    if (!Objects.areEqual(actualVariantSetId, variantSetId)) {
      failWithMessage(assertjErrorMessage, actual, variantSetId, actualVariantSetId);
    }

    // return the current assertion for method chaining
    return this;
  }













}
