package org.ga4gh.models;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link ReadStats} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ReadStatsAssert extends AbstractAssert<ReadStatsAssert, ReadStats> {

  /**
   * Creates a new <code>{@link ReadStatsAssert}</code> to make assertions on actual ReadStats.
   * @param actual the ReadStats we want to make assertions on.
   */
  public ReadStatsAssert(ReadStats actual) {
    super(actual, ReadStatsAssert.class);
  }

  /**
   * An entry point for ReadStatsAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myReadStats)</code> and get specific assertion with code completion.
   * @param actual the ReadStats we want to make assertions on.
   * @return a new <code>{@link ReadStatsAssert}</code>
   */
  public static ReadStatsAssert assertThat(ReadStats actual) {
    return new ReadStatsAssert(actual);
  }

  /**
   * Verifies that the actual ReadStats's alignedReadCount is equal to the given one.
   * @param alignedReadCount the given alignedReadCount to compare the actual ReadStats's alignedReadCount to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadStats's alignedReadCount is not equal to the given one.
   */
  public ReadStatsAssert hasAlignedReadCount(Long alignedReadCount) {
    // check that actual ReadStats we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting alignedReadCount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualAlignedReadCount = actual.getAlignedReadCount();
    if (!Objects.areEqual(actualAlignedReadCount, alignedReadCount)) {
      failWithMessage(assertjErrorMessage, actual, alignedReadCount, actualAlignedReadCount);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadStats's baseCount is equal to the given one.
   * @param baseCount the given baseCount to compare the actual ReadStats's baseCount to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadStats's baseCount is not equal to the given one.
   */
  public ReadStatsAssert hasBaseCount(Long baseCount) {
    // check that actual ReadStats we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting baseCount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualBaseCount = actual.getBaseCount();
    if (!Objects.areEqual(actualBaseCount, baseCount)) {
      failWithMessage(assertjErrorMessage, actual, baseCount, actualBaseCount);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadStats's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual ReadStats's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadStats's classSchema is not equal to the given one.
   */
  public ReadStatsAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual ReadStats we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadStats's schema is equal to the given one.
   * @param schema the given schema to compare the actual ReadStats's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadStats's schema is not equal to the given one.
   */
  public ReadStatsAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual ReadStats we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadStats's unalignedReadCount is equal to the given one.
   * @param unalignedReadCount the given unalignedReadCount to compare the actual ReadStats's unalignedReadCount to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadStats's unalignedReadCount is not equal to the given one.
   */
  public ReadStatsAssert hasUnalignedReadCount(Long unalignedReadCount) {
    // check that actual ReadStats we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting unalignedReadCount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Long actualUnalignedReadCount = actual.getUnalignedReadCount();
    if (!Objects.areEqual(actualUnalignedReadCount, unalignedReadCount)) {
      failWithMessage(assertjErrorMessage, actual, unalignedReadCount, actualUnalignedReadCount);
    }

    // return the current assertion for method chaining
    return this;
  }




}
