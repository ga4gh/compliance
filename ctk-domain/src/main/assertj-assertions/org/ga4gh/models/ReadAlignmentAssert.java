package org.ga4gh.models;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link ReadAlignment} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ReadAlignmentAssert extends AbstractAssert<ReadAlignmentAssert, ReadAlignment> {

  /**
   * Creates a new <code>{@link ReadAlignmentAssert}</code> to make assertions on actual ReadAlignment.
   * @param actual the ReadAlignment we want to make assertions on.
   */
  public ReadAlignmentAssert(ReadAlignment actual) {
    super(actual, ReadAlignmentAssert.class);
  }

  /**
   * An entry point for ReadAlignmentAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myReadAlignment)</code> and get specific assertion with code completion.
   * @param actual the ReadAlignment we want to make assertions on.
   * @return a new <code>{@link ReadAlignmentAssert}</code>
   */
  public static ReadAlignmentAssert assertThat(ReadAlignment actual) {
    return new ReadAlignmentAssert(actual);
  }

  /**
   * Verifies that the actual ReadAlignment's alignedQuality contains the given Integer elements.
   * @param alignedQuality the given elements that should be contained in actual ReadAlignment's alignedQuality.
   * @return this assertion object.
   * @throws AssertionError if the actual ReadAlignment's alignedQuality does not contain all given Integer elements.
   */
  public ReadAlignmentAssert hasAlignedQuality(Integer... alignedQuality) {
    // check that actual ReadAlignment we want to make assertions on is not null.
    isNotNull();

    // check that given Integer varargs is not null.
    if (alignedQuality == null) failWithMessage("Expecting alignedQuality parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getAlignedQuality(), alignedQuality);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadAlignment's alignedQuality contains <b>only<b> the given Integer elements and nothing else in whatever order.
   * @param alignedQuality the given elements that should be contained in actual ReadAlignment's alignedQuality.
   * @return this assertion object.
   * @throws AssertionError if the actual ReadAlignment's alignedQuality does not contain all given Integer elements.
   */
  public ReadAlignmentAssert hasOnlyAlignedQuality(Integer... alignedQuality) {
    // check that actual ReadAlignment we want to make assertions on is not null.
    isNotNull();

    // check that given Integer varargs is not null.
    if (alignedQuality == null) failWithMessage("Expecting alignedQuality parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getAlignedQuality(), alignedQuality);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadAlignment's alignedQuality does not contain the given Integer elements.
   *
   * @param alignedQuality the given elements that should not be in actual ReadAlignment's alignedQuality.
   * @return this assertion object.
   * @throws AssertionError if the actual ReadAlignment's alignedQuality contains any given Integer elements.
   */
  public ReadAlignmentAssert doesNotHaveAlignedQuality(Integer... alignedQuality) {
    // check that actual ReadAlignment we want to make assertions on is not null.
    isNotNull();

    // check that given Integer varargs is not null.
    if (alignedQuality == null) failWithMessage("Expecting alignedQuality parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getAlignedQuality(), alignedQuality);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadAlignment has no alignedQuality.
   * @return this assertion object.
   * @throws AssertionError if the actual ReadAlignment's alignedQuality is not empty.
   */
  public ReadAlignmentAssert hasNoAlignedQuality() {
    // check that actual ReadAlignment we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have alignedQuality but had :\n  <%s>";
    
    // check
    if (actual.getAlignedQuality().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getAlignedQuality());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual ReadAlignment's alignedSequence is equal to the given one.
   * @param alignedSequence the given alignedSequence to compare the actual ReadAlignment's alignedSequence to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadAlignment's alignedSequence is not equal to the given one.
   */
  public ReadAlignmentAssert hasAlignedSequence(String alignedSequence) {
    // check that actual ReadAlignment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting alignedSequence of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualAlignedSequence = actual.getAlignedSequence();
    if (!Objects.areEqual(actualAlignedSequence, alignedSequence)) {
      failWithMessage(assertjErrorMessage, actual, alignedSequence, actualAlignedSequence);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadAlignment's alignment is equal to the given one.
   * @param alignment the given alignment to compare the actual ReadAlignment's alignment to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadAlignment's alignment is not equal to the given one.
   */
  public ReadAlignmentAssert hasAlignment(LinearAlignment alignment) {
    // check that actual ReadAlignment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting alignment of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    LinearAlignment actualAlignment = actual.getAlignment();
    if (!Objects.areEqual(actualAlignment, alignment)) {
      failWithMessage(assertjErrorMessage, actual, alignment, actualAlignment);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadAlignment's classSchema is equal to the given one.
   * @param classSchema the given classSchema to compare the actual ReadAlignment's classSchema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadAlignment's classSchema is not equal to the given one.
   */
  public ReadAlignmentAssert hasClassSchema(org.apache.avro.Schema classSchema) {
    // check that actual ReadAlignment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting classSchema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualClassSchema = actual.getClassSchema();
    if (!Objects.areEqual(actualClassSchema, classSchema)) {
      failWithMessage(assertjErrorMessage, actual, classSchema, actualClassSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadAlignment's duplicateFragment is equal to the given one.
   * @param duplicateFragment the given duplicateFragment to compare the actual ReadAlignment's duplicateFragment to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadAlignment's duplicateFragment is not equal to the given one.
   */
  public ReadAlignmentAssert hasDuplicateFragment(Boolean duplicateFragment) {
    // check that actual ReadAlignment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting duplicateFragment of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Boolean actualDuplicateFragment = actual.getDuplicateFragment();
    if (!Objects.areEqual(actualDuplicateFragment, duplicateFragment)) {
      failWithMessage(assertjErrorMessage, actual, duplicateFragment, actualDuplicateFragment);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadAlignment's failedVendorQualityChecks is equal to the given one.
   * @param failedVendorQualityChecks the given failedVendorQualityChecks to compare the actual ReadAlignment's failedVendorQualityChecks to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadAlignment's failedVendorQualityChecks is not equal to the given one.
   */
  public ReadAlignmentAssert hasFailedVendorQualityChecks(Boolean failedVendorQualityChecks) {
    // check that actual ReadAlignment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting failedVendorQualityChecks of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Boolean actualFailedVendorQualityChecks = actual.getFailedVendorQualityChecks();
    if (!Objects.areEqual(actualFailedVendorQualityChecks, failedVendorQualityChecks)) {
      failWithMessage(assertjErrorMessage, actual, failedVendorQualityChecks, actualFailedVendorQualityChecks);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadAlignment's fragmentId is equal to the given one.
   * @param fragmentId the given fragmentId to compare the actual ReadAlignment's fragmentId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadAlignment's fragmentId is not equal to the given one.
   */
  public ReadAlignmentAssert hasFragmentId(String fragmentId) {
    // check that actual ReadAlignment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting fragmentId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualFragmentId = actual.getFragmentId();
    if (!Objects.areEqual(actualFragmentId, fragmentId)) {
      failWithMessage(assertjErrorMessage, actual, fragmentId, actualFragmentId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadAlignment's fragmentLength is equal to the given one.
   * @param fragmentLength the given fragmentLength to compare the actual ReadAlignment's fragmentLength to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadAlignment's fragmentLength is not equal to the given one.
   */
  public ReadAlignmentAssert hasFragmentLength(Integer fragmentLength) {
    // check that actual ReadAlignment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting fragmentLength of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualFragmentLength = actual.getFragmentLength();
    if (!Objects.areEqual(actualFragmentLength, fragmentLength)) {
      failWithMessage(assertjErrorMessage, actual, fragmentLength, actualFragmentLength);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadAlignment's fragmentName is equal to the given one.
   * @param fragmentName the given fragmentName to compare the actual ReadAlignment's fragmentName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadAlignment's fragmentName is not equal to the given one.
   */
  public ReadAlignmentAssert hasFragmentName(String fragmentName) {
    // check that actual ReadAlignment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting fragmentName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualFragmentName = actual.getFragmentName();
    if (!Objects.areEqual(actualFragmentName, fragmentName)) {
      failWithMessage(assertjErrorMessage, actual, fragmentName, actualFragmentName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadAlignment's id is equal to the given one.
   * @param id the given id to compare the actual ReadAlignment's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadAlignment's id is not equal to the given one.
   */
  public ReadAlignmentAssert hasId(String id) {
    // check that actual ReadAlignment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualId = actual.getId();
    if (!Objects.areEqual(actualId, id)) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadAlignment's info is equal to the given one.
   * @param info the given info to compare the actual ReadAlignment's info to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadAlignment's info is not equal to the given one.
   */
  public ReadAlignmentAssert hasInfo(java.util.Map info) {
    // check that actual ReadAlignment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting info of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    java.util.Map actualInfo = actual.getInfo();
    if (!Objects.areEqual(actualInfo, info)) {
      failWithMessage(assertjErrorMessage, actual, info, actualInfo);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadAlignment's nextMatePosition is equal to the given one.
   * @param nextMatePosition the given nextMatePosition to compare the actual ReadAlignment's nextMatePosition to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadAlignment's nextMatePosition is not equal to the given one.
   */
  public ReadAlignmentAssert hasNextMatePosition(Position nextMatePosition) {
    // check that actual ReadAlignment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting nextMatePosition of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Position actualNextMatePosition = actual.getNextMatePosition();
    if (!Objects.areEqual(actualNextMatePosition, nextMatePosition)) {
      failWithMessage(assertjErrorMessage, actual, nextMatePosition, actualNextMatePosition);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadAlignment's numberReads is equal to the given one.
   * @param numberReads the given numberReads to compare the actual ReadAlignment's numberReads to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadAlignment's numberReads is not equal to the given one.
   */
  public ReadAlignmentAssert hasNumberReads(Integer numberReads) {
    // check that actual ReadAlignment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting numberReads of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualNumberReads = actual.getNumberReads();
    if (!Objects.areEqual(actualNumberReads, numberReads)) {
      failWithMessage(assertjErrorMessage, actual, numberReads, actualNumberReads);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadAlignment's properPlacement is equal to the given one.
   * @param properPlacement the given properPlacement to compare the actual ReadAlignment's properPlacement to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadAlignment's properPlacement is not equal to the given one.
   */
  public ReadAlignmentAssert hasProperPlacement(Boolean properPlacement) {
    // check that actual ReadAlignment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting properPlacement of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Boolean actualProperPlacement = actual.getProperPlacement();
    if (!Objects.areEqual(actualProperPlacement, properPlacement)) {
      failWithMessage(assertjErrorMessage, actual, properPlacement, actualProperPlacement);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadAlignment's readGroupId is equal to the given one.
   * @param readGroupId the given readGroupId to compare the actual ReadAlignment's readGroupId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadAlignment's readGroupId is not equal to the given one.
   */
  public ReadAlignmentAssert hasReadGroupId(String readGroupId) {
    // check that actual ReadAlignment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting readGroupId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualReadGroupId = actual.getReadGroupId();
    if (!Objects.areEqual(actualReadGroupId, readGroupId)) {
      failWithMessage(assertjErrorMessage, actual, readGroupId, actualReadGroupId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadAlignment's readNumber is equal to the given one.
   * @param readNumber the given readNumber to compare the actual ReadAlignment's readNumber to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadAlignment's readNumber is not equal to the given one.
   */
  public ReadAlignmentAssert hasReadNumber(Integer readNumber) {
    // check that actual ReadAlignment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting readNumber of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualReadNumber = actual.getReadNumber();
    if (!Objects.areEqual(actualReadNumber, readNumber)) {
      failWithMessage(assertjErrorMessage, actual, readNumber, actualReadNumber);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadAlignment's schema is equal to the given one.
   * @param schema the given schema to compare the actual ReadAlignment's schema to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadAlignment's schema is not equal to the given one.
   */
  public ReadAlignmentAssert hasSchema(org.apache.avro.Schema schema) {
    // check that actual ReadAlignment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting schema of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.apache.avro.Schema actualSchema = actual.getSchema();
    if (!Objects.areEqual(actualSchema, schema)) {
      failWithMessage(assertjErrorMessage, actual, schema, actualSchema);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadAlignment's secondaryAlignment is equal to the given one.
   * @param secondaryAlignment the given secondaryAlignment to compare the actual ReadAlignment's secondaryAlignment to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadAlignment's secondaryAlignment is not equal to the given one.
   */
  public ReadAlignmentAssert hasSecondaryAlignment(Boolean secondaryAlignment) {
    // check that actual ReadAlignment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting secondaryAlignment of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Boolean actualSecondaryAlignment = actual.getSecondaryAlignment();
    if (!Objects.areEqual(actualSecondaryAlignment, secondaryAlignment)) {
      failWithMessage(assertjErrorMessage, actual, secondaryAlignment, actualSecondaryAlignment);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ReadAlignment's supplementaryAlignment is equal to the given one.
   * @param supplementaryAlignment the given supplementaryAlignment to compare the actual ReadAlignment's supplementaryAlignment to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ReadAlignment's supplementaryAlignment is not equal to the given one.
   */
  public ReadAlignmentAssert hasSupplementaryAlignment(Boolean supplementaryAlignment) {
    // check that actual ReadAlignment we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting supplementaryAlignment of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Boolean actualSupplementaryAlignment = actual.getSupplementaryAlignment();
    if (!Objects.areEqual(actualSupplementaryAlignment, supplementaryAlignment)) {
      failWithMessage(assertjErrorMessage, actual, supplementaryAlignment, actualSupplementaryAlignment);
    }

    // return the current assertion for method chaining
    return this;
  }


















}
