<?xml version="1.0" encoding="UTF-8"?>
<!-- see http://logging.apache.org/log4j/2.x/manual/configuration.html -->
<Configuration status="WARN">
    <!-- use status="TRACE" to get more log4j2 details if need to troubleshoot logging config -->
    <Appenders>
        <Console name="STDOUT" target="SYSTEM_OUT">
            <!-- see https://logging.apache.org/log4j/2.x/manual/layouts.html -->
                <PatternLayout pattern="[%c{1.} ] %m%n"/> <!-- class name, method name, message, newline -->
        </Console>
        <!-- this appender writes to a log-tracker used in the intellij IDE -->
        <!--
        <Socket name="LF5_SOCKET" host="localhost" port="4454" protocol="TCP" reconnectionDelay="5000"/>
        -->
        <Console name="TESTLOG" target="SYSTEM_OUT">
            <PatternLayout pattern="[%c{1.}] %m%n"/> <!-- logger name,  message, newline -->
        </Console>
    </Appenders>

    <!-- levels are TRACE, DEBUG, INFO, WARN, ERROR, FATAL, and OFF in decreasing verbosity-->
    <Loggers>
        <!-- loggers are in a tree, this is the root - if no other logger catches the message, this one does -->
        <Root level="warn">
            <AppenderRef ref="STDOUT" level="WARN"/>
            <!--<AppenderRef ref="LF5_SOCKET" level="DEBUG"/>-->
        </Root>

        <!-- This sets the level for the CTK, independent of the framework classes
             (spring, etc). Note that since additivity is false, the CTK log messages do
             not percolate to the Root logger (or its Appender) -->
        <Logger name="org.ga4gh.ctk" level="warn" additivity="false">
            <AppenderRef ref="STDOUT"/>
        </Logger>

        <Logger name="TESTLOG" level="info" additivity="false">
            <AppenderRef ref="TESTLOG"/>
        </Logger>
        <!-- TRAFFIC is the <sent body, received class, status> tuple for coverage checking -->
        <Logger name="TESTLOG.TRAFFIC" level="warn" additivity="false">
            <AppenderRef ref="TESTLOG"/>
        </Logger>

        <!-- URLMappingImpl sets up the URLs mapped from IDL-defined endpoints -->
        <!-- most of what would be logged from URLMappingImpl happens before the logging
             framework kicks in, so there's a special property you can set on the launch command to cause
             URLMappingImpl to dump directly to stdout as it's loading up the defaulttransport.poperties:
             "-Dctk.tgt.urlmapper.dump=true" -->
        <Logger name="org.ga4gh.ctk.transport.URLMAPPINGImpl" level="info" additivity="false">
            <AppenderRef ref="STDOUT"/>
        </Logger>

        <!-- the top of the target-server test classes; this is where you might set the general
         level for debug dumps etc from the tests (though, usually the tests themselves use TESTLOG -->
        <Logger name="org.ga4gh.cts" level="info" additivity="false">
            <AppenderRef ref="STDOUT"/>
        </Logger>

        <!-- transport package provides the wire communications (serialization/deserialization,
transmit/receive, etc). -->
        <Logger name="org.ga4gh.ctk.transport" level="warn" additivity="false">
            <AppenderRef ref="STDOUT"/>
        </Logger>

        <!-- AvroJson manages the communications; one AvroJson object is
             instantiated for each request/response attempt. Each communications req/resp
             requires one instantiated AvroJson object, and this creation is logged at
             the INFO level. The object drives through several sub-steps (making JSON, sending, etc)
             and these steps are logged at the DEBUG level. -->
        <Logger name="org.ga4gh.ctk.transport.avrojson.AvroJson" level="WARN" additivity="false">
            <AppenderRef ref="STDOUT"/>
        </Logger>

        <!-- the o.g.c.domain package includes domain data objects which support the tests; initially,
         this is just the TrafficLog (the message), its Builder and Repository. -->
        <Logger name="org.ga4gh.ctk.domain" level="info" additivity="false">
            <AppenderRef ref="STDOUT" />
        </Logger>

        <!-- Services package includes the DomainInformationService and the TrafficLogService -->
        <Logger name="org.ga4gh.ctk.services" level="warn" additivity="false">
            <AppenderRef ref="STDOUT"/>
        </Logger>

        <!-- This logger is incase you want to set a specific monitor on the DIS,
             overriding the setting of the general o.g.c.services logger -->
        <Logger name="org.ga4gh.ctk.services.DomainInformationService" level="info" additivity="false">
            <AppenderRef ref="STDOUT"/>
        </Logger>

        <!-- This logger is incase you want to set a specific monitor on the TLS,
     overriding the setting of the general o.g.c.services logger -->
        <Logger name="org.ga4gh.ctk.services.TrafficLogService" level="warn" additivity="false">
            <AppenderRef ref="STDOUT"/>
        </Logger>

        <!-- utility package includes ResultsSupport (which calculates the directory to write testresults into)
        and Utils (which has functions to e.g. read file contents into strings -->
        <Logger name="org.ga4gh.ctk.utility" level="warn" additivity="false">
            <AppenderRef ref="STDOUT" />
        </Logger>

        <!-- AntExecutor sets up Ant, runs the file named by $ctk.antfile
             This Logger catches messages generated by the ant framework and the specific tasks
             so this is useful for seeing what params are recieved, what classes are found,
             etc during the antual ant-managed test run -->
        <Logger name="org.ga4gh.ctk.AntExecutor" level="info" additivity="false">
            <AppenderRef ref="STDOUT"/>
        </Logger>
        <!-- AntExecListener catches ant-generated messages; task start/end, build start/end,
             and the more general messages that tass generate at levels
             VERBOSE, DEBUG, INFO, WARN, ERROR (all are mapped to same-named
             log4j2 levels, with VERBOSE -> 'trace' -->
        <Logger name="org.ga4gh.ctk.AntExecListener" level="info" additivity="false">
            <AppenderRef ref="STDOUT"/>
        </Logger>
        <!-- TestExecistener is the JUnitResultFormatter we embed in the junit task,
             it mainly maps junit task messages into TESTLOG but this setting is just
             in case someone adds direct 'log' output in that class (until they do,
             changing the level of this Logger won't have any effect -->
        <Logger name="org.ga4gh.ctk.TestExecListener" level="info" additivity="false">
            <AppenderRef ref="STDOUT"/>
        </Logger>
    </Loggers>

</Configuration>