package org.ga4gh.ctk.transport;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link WireTracker} specific assertions - Generated by CustomAssertionGenerator.
 */
public class WireTrackerAssert extends AbstractAssert<WireTrackerAssert, WireTracker> {

  /**
   * Creates a new <code>{@link WireTrackerAssert}</code> to make assertions on actual WireTracker.
   * @param actual the WireTracker we want to make assertions on.
   */
  public WireTrackerAssert(WireTracker actual) {
    super(actual, WireTrackerAssert.class);
  }

  /**
   * An entry point for WireTrackerAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myWireTracker)</code> and get specific assertion with code completion.
   * @param actual the WireTracker we want to make assertions on.
   * @return a new <code>{@link WireTrackerAssert}</code>
   */
  public static WireTrackerAssert assertThat(WireTracker actual) {
    return new WireTrackerAssert(actual);
  }

  /**
   * Verifies that the actual WireTracker's errorCode is equal to the given one.
   * @param errorCode the given errorCode to compare the actual WireTracker's errorCode to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WireTracker's errorCode is not equal to the given one.
   */
  public WireTrackerAssert hasErrorCode(int errorCode) {
    // check that actual WireTracker we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting errorCode of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualErrorCode = actual.getErrorCode();
    if (actualErrorCode != errorCode) {
      failWithMessage(assertjErrorMessage, actual, errorCode, actualErrorCode);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WireTracker's gae is equal to the given one.
   * @param gae the given gae to compare the actual WireTracker's gae to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WireTracker's gae is not equal to the given one.
   */
  public WireTrackerAssert hasGae(org.ga4gh.methods.GAException gae) {
    // check that actual WireTracker we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting gae of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.ga4gh.methods.GAException actualGae = actual.getGae();
    if (!Objects.areEqual(actualGae, gae)) {
      failWithMessage(assertjErrorMessage, actual, gae, actualGae);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WireTracker's message is equal to the given one.
   * @param message the given message to compare the actual WireTracker's message to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WireTracker's message is not equal to the given one.
   */
  public WireTrackerAssert hasMessage(String message) {
    // check that actual WireTracker we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting message of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualMessage = actual.getMessage();
    if (!Objects.areEqual(actualMessage, message)) {
      failWithMessage(assertjErrorMessage, actual, message, actualMessage);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WireTracker's responseStatus is equal to the given one.
   * @param responseStatus the given responseStatus to compare the actual WireTracker's responseStatus to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WireTracker's responseStatus is not equal to the given one.
   */
  public WireTrackerAssert hasResponseStatus(RespCode responseStatus) {
    // check that actual WireTracker we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting responseStatus of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    RespCode actualResponseStatus = actual.getResponseStatus();
    if (!Objects.areEqual(actualResponseStatus, responseStatus)) {
      failWithMessage(assertjErrorMessage, actual, responseStatus, actualResponseStatus);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WireTracker's bodyReceived is equal to the given one.
   * @param bodyReceived the given bodyReceived to compare the actual WireTracker's bodyReceived to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WireTracker's bodyReceived is not equal to the given one.
   */
  public WireTrackerAssert hasBodyReceived(String bodyReceived) {
    // check that actual WireTracker we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting bodyReceived of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualBodyReceived = actual.bodyReceived;
    if (!Objects.areEqual(actualBodyReceived, bodyReceived)) {
      failWithMessage(assertjErrorMessage, actual, bodyReceived, actualBodyReceived);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WireTracker's bodySent is equal to the given one.
   * @param bodySent the given bodySent to compare the actual WireTracker's bodySent to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WireTracker's bodySent is not equal to the given one.
   */
  public WireTrackerAssert hasBodySent(String bodySent) {
    // check that actual WireTracker we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting bodySent of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualBodySent = actual.bodySent;
    if (!Objects.areEqual(actualBodySent, bodySent)) {
      failWithMessage(assertjErrorMessage, actual, bodySent, actualBodySent);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WireTracker's theUrl is equal to the given one.
   * @param theUrl the given theUrl to compare the actual WireTracker's theUrl to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WireTracker's theUrl is not equal to the given one.
   */
  public WireTrackerAssert hasTheUrl(String theUrl) {
    // check that actual WireTracker we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting theUrl of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualTheUrl = actual.theUrl;
    if (!Objects.areEqual(actualTheUrl, theUrl)) {
      failWithMessage(assertjErrorMessage, actual, theUrl, actualTheUrl);
    }

    // return the current assertion for method chaining
    return this;
  }

}
